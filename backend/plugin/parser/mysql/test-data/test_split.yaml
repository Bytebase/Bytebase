- statement: |-
    -- klsjdfjasldf
       -- klsjdflkjaskldfj

  want:
    res:
      - text: |-
          -- klsjdfjasldf
             -- klsjdflkjaskldfj
          ;
        baseline: 0
        firststatementline: 0
        firststatementcolumn: 0
        lastline: 3
        lastcolumn: 0
        empty: false
    err: ""
- statement: |-
    select * from t;
       /* sdfasdf */
  want:
    res:
      - text: select * from t;
        baseline: 0
        firststatementline: 0
        firststatementcolumn: 0
        lastline: 1
        lastcolumn: 0
        empty: false
      - text: |-
          /* sdfasdf */
          ;
        baseline: 0
        firststatementline: 0
        firststatementcolumn: 0
        lastline: 3
        lastcolumn: 0
        empty: false
    err: ""
- statement: |-
    select * from t;
       /* sdfasdf */;
       select * from t;
  want:
    res:
        - text: select * from t;
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 1
          lastcolumn: 0
          empty: false
        - text: |4-
                /* sdfasdf */;
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 2
          lastcolumn: 0
          empty: false
        - text: |4-
               select * from t
            ;
          baseline: 1
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 4
          lastcolumn: 0
          empty: false
    err: ""
- statement: |-
    CREATE DEFINER=`root`@`%` FUNCTION `CalcIncome`( starting_value INT ) RETURNS int
    BEGIN

         DECLARE income INT;

         SET income = 0;

         label1: WHILE income <= 3000 DO
        SET income = income + starting_value;
         END WHILE label1;

         RETURN income;

      END ;
  want:
    res:
        - text: |-
            CREATE DEFINER=`root`@`%` FUNCTION `CalcIncome`( starting_value INT ) RETURNS int
            BEGIN

                 DECLARE income INT;

                 SET income = 0;

                 label1: WHILE income <= 3000 DO
                SET income = income + starting_value;
                 END WHILE label1;

                 RETURN income;

              END
            ;
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 15
          lastcolumn: 0
          empty: false
    err: ""
- statement: '    CREATE TABLE t(a int); CREATE TABLE t1(a int)'
  want:
    res:
        - text: '    CREATE TABLE t(a int);'
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 1
          lastcolumn: 0
          empty: false
        - text: |4-
             CREATE TABLE t1(a int)
            ;
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 2
          lastcolumn: 0
          empty: false
    err: ""
- statement: |-
    CREATE TABLE `tech_Book`(id int, name varchar(255));
    INSERT INTO `tech_Book` VALUES (0, 'abce_ksdf'), (1, 'lks''kjsafa\'jdfl;"ka');
  want:
    res:
        - text: CREATE TABLE `tech_Book`(id int, name varchar(255));
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 1
          lastcolumn: 0
          empty: false
        - text: |4-
            INSERT INTO `tech_Book` VALUES (0, 'abce_ksdf'), (1, 'lks''kjsafa\'jdfl;"ka')
            ;
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 3
          lastcolumn: 0
          empty: false
    err: ""
- statement: |4-
          /* this is the comment. */
          CREATE /* inline comment */TABLE tech_Book(id int, name varchar(255));
          -- this is the comment.
          INSERT INTO tech_Book VALUES (0, 'abce_ksdf'), (1, 'lks''kjsafa\'jdfl;"ka');
          # this is the comment.
          INSERT INTO tech_Book VALUES (0, 'abce_ksdf'), (1, 'lks''kjsafa\'jdfl;"ka');
  want:
    res:
        - text: |4-
                  /* this is the comment. */
                  CREATE /* inline comment */TABLE tech_Book(id int, name varchar(255));
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 3
          lastcolumn: 0
          empty: false
        - text: |4-
                  -- this is the comment.
                  INSERT INTO tech_Book VALUES (0, 'abce_ksdf'), (1, 'lks''kjsafa\'jdfl;"ka');
          baseline: 2
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 5
          lastcolumn: 0
          empty: false
        - text: |4-
                  # this is the comment.
                  INSERT INTO tech_Book VALUES (0, 'abce_ksdf'), (1, 'lks''kjsafa\'jdfl;"ka')
            ;
          baseline: 4
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 8
          lastcolumn: 0
          empty: false
    err: ""
- statement: |-
    # test for defining stored programs
          CREATE PROCEDURE dorepeat(p1 INT)
          BEGIN
           SET @x = 0;
           REPEAT SET @x = @x + 1; UNTIL @x > p1 END REPEAT;
          END
          ;
          CALL dorepeat(1000);
          SELECT @x;

  want:
    res:
        - text: |-
            # test for defining stored programs
                  CREATE PROCEDURE dorepeat(p1 INT)
                  BEGIN
                   SET @x = 0;
                   REPEAT SET @x = @x + 1; UNTIL @x > p1 END REPEAT;
                  END
                  ;
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 7
          lastcolumn: 0
          empty: false
        - text: |4-
                  CALL dorepeat(1000);
          baseline: 6
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 8
          lastcolumn: 0
          empty: false
        - text: |4-
                  SELECT @x
            ;
          baseline: 7
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 10
          lastcolumn: 0
          empty: false
    err: ""
- statement: |-
    # test for defining stored programs
          CREATE PROCEDURE dorepeat(p1 INT)
          /* This is a comment */
          BEGIN
           SET @x = 0;
           REPEAT SET @x = @x + 1; UNTIL @x > p1 END REPEAT;
          END
          ;
          CALL dorepeat(1000);
          SELECT @x;

  want:
    res:
        - text: |-
            # test for defining stored programs
                  CREATE PROCEDURE dorepeat(p1 INT)
                  /* This is a comment */
                  BEGIN
                   SET @x = 0;
                   REPEAT SET @x = @x + 1; UNTIL @x > p1 END REPEAT;
                  END
                  ;
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 8
          lastcolumn: 0
          empty: false
        - text: |4-
                  CALL dorepeat(1000);
          baseline: 7
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 9
          lastcolumn: 0
          empty: false
        - text: |4-
                  SELECT @x
            ;
          baseline: 8
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 11
          lastcolumn: 0
          empty: false
    err: ""
- statement: "CREATE TABLE t\r\n(a int);\r\nCREATE TABLE t1(b int);"
  want:
    res:
        - text: "CREATE TABLE t\r\n(a int);"
          baseline: 0
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 2
          lastcolumn: 0
          empty: false
        - text: "\r\nCREATE TABLE t1(b int)\n;"
          baseline: 1
          firststatementline: 0
          firststatementcolumn: 0
          lastline: 4
          lastcolumn: 0
          empty: false
    err: ""
- statement: INSERT INTO t VALUES ('klajfas)
  want:
    res: []
    err: 'failed to split multi sql: invalid string: not found delimiter: '', but found EOF'
- statement: INSERT INTO `t VALUES ('klajfas)
  want:
    res: []
    err: 'failed to split multi sql: invalid indentifier: not found delimiter: `, but found EOF'
# 