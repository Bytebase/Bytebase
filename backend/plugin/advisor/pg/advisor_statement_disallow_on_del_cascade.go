package pg

// Framework code is generated by the generator.

import (
	"encoding/json"

	pgquery "github.com/pganalyze/pg_query_go/v5"
	"github.com/pkg/errors"

	"github.com/bytebase/bytebase/backend/plugin/advisor"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*StatementDisallowOnDelCascadeAdvisor)(nil)
)

func init() {
	advisor.Register(storepb.Engine_POSTGRES, advisor.PostgreSQLStatementDisallowCascade, &StatementDisallowOnDelCascadeAdvisor{})
}

// StatementDisallowOnDelCascadeAdvisor is the advisor checking the disallow cascade.
type StatementDisallowOnDelCascadeAdvisor struct {
}

// Check checks for DML dry run.
func (*StatementDisallowOnDelCascadeAdvisor) Check(ctx advisor.Context, _ string) ([]advisor.Advice, error) {
	stmt := ctx.Statements
	if stmt == "" {
		return []advisor.Advice{
			{
				Status:  advisor.Success,
				Code:    advisor.Ok,
				Title:   "OK",
				Content: "",
			},
		}, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}

	jsonText, err := pgquery.ParseToJSON(stmt)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to parse statement to JSON")
	}

	var jsonData map[string]any
	if err := json.Unmarshal([]byte(jsonText), &jsonData); err != nil {
		return nil, errors.Wrapf(err, "failed to unmarshal JSON")
	}

	cascadeLocations := cascadeNumRecursive(jsonData, 0)
	cascadePositions := convertLocationsToPositions(stmt, cascadeLocations)

	var adviceList []advisor.Advice
	for _, p := range cascadePositions {
		adviceList = append(adviceList, advisor.Advice{
			Status:  level,
			Title:   string(ctx.Rule.Type),
			Content: "Cascade is disallowed but used in this statement",
			Code:    advisor.StatementDisallowCascade,
			Line:    p.line + 1,
			Column:  p.column + 1,
		})
	}
	if len(adviceList) == 0 {
		adviceList = append(adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return adviceList, nil
}
