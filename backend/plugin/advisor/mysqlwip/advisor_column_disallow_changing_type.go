package mysqlwip

// Framework code is generated by the generator.

import (
	"fmt"
	"strings"

	"github.com/antlr4-go/antlr/v4"
	"github.com/pkg/errors"

	mysql "github.com/bytebase/mysql-parser"

	"github.com/bytebase/bytebase/backend/plugin/advisor"
	"github.com/bytebase/bytebase/backend/plugin/advisor/catalog"
	mysqlparser "github.com/bytebase/bytebase/backend/plugin/parser/mysql"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*ColumnDisallowChangingTypeAdvisor)(nil)
)

func init() {
	// only for mysqlwip test.
	advisor.Register(storepb.Engine_ENGINE_UNSPECIFIED, advisor.MySQLColumnDisallowChangingType, &ColumnDisallowChangingTypeAdvisor{})
}

// ColumnDisallowChangingTypeAdvisor is the advisor checking for disallow changing column type..
type ColumnDisallowChangingTypeAdvisor struct {
}

// Check checks for disallow changing column type..
func (*ColumnDisallowChangingTypeAdvisor) Check(ctx advisor.Context, _ string) ([]advisor.Advice, error) {
	stmtList, ok := ctx.AST.([]*mysqlparser.ParseResult)
	if !ok {
		return nil, errors.Errorf("failed to convert to mysql parser result")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &columnDisallowChangingTypeChecker{
		level:   level,
		title:   string(ctx.Rule.Type),
		catalog: ctx.Catalog,
	}

	for _, stmt := range stmtList {
		checker.baseLine = stmt.BaseLine
		antlr.ParseTreeWalkerDefault.Walk(checker, stmt.Tree)
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type columnDisallowChangingTypeChecker struct {
	*mysql.BaseMySQLParserListener

	baseLine   int
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
	text       string
	catalog    *catalog.Finder
}

func (checker *columnDisallowChangingTypeChecker) EnterQuery(ctx *mysql.QueryContext) {
	checker.text = ctx.GetParser().GetTokenStream().GetTextFromRuleContext(ctx)
}

// EnterAlterTable is called when production alterTable is entered.
func (checker *columnDisallowChangingTypeChecker) EnterAlterTable(ctx *mysql.AlterTableContext) {
	if ctx.AlterTableActions() == nil {
		return
	}
	if ctx.AlterTableActions().AlterCommandList() == nil {
		return
	}
	if ctx.AlterTableActions().AlterCommandList().AlterList() == nil {
		return
	}

	_, tableName := mysqlparser.NormalizeMySQLTableRef(ctx.TableRef())
	// alter table add column, change column, modify column.
	for _, item := range ctx.AlterTableActions().AlterCommandList().AlterList().AllAlterListItem() {
		if item == nil {
			continue
		}

		var columnName string
		switch {
		// change column
		case item.CHANGE_SYMBOL() != nil && item.ColumnInternalRef() != nil && item.Identifier() != nil:
			// only focus on old colunn-name.
			columnName = mysqlparser.NormalizeMySQLColumnInternalRef(item.ColumnInternalRef())
		// MODIFY COLUMN
		case item.MODIFY_SYMBOL() != nil && item.ColumnInternalRef() != nil && item.FieldDefinition() != nil:
			columnName = mysqlparser.NormalizeMySQLColumnInternalRef(item.ColumnInternalRef())
		default:
			continue
		}
		checker.changeColumnType(tableName, columnName, item.FieldDefinition().DataType())
	}
}

func normalizeColumnTypeImpl(tp string) string {
	switch {
	case strings.HasPrefix(tp, "integer"), strings.HasPrefix(tp, "int"):
		return "int"
	case strings.HasPrefix(tp, "tinyint"):
		return "tinyint"
	case strings.HasPrefix(tp, "smallint"):
		return "smallint"
	case strings.HasPrefix(tp, "mediumint"):
		return "mediumint"
	case strings.HasPrefix(tp, "bigint"):
		return "bigint"
	default:
		return strings.ToLower(tp)
	}
}

func normalizeColumnType(tp string) string {
	columnType := strings.ToLower(tp)
	switch {
	case strings.Contains(columnType, "unsigned"):
		return normalizeColumnTypeImpl(tp) + "unsigned"
	default:
		return normalizeColumnTypeImpl(columnType)
	}
}

func (checker *columnDisallowChangingTypeChecker) changeColumnType(tableName, columnName string, dataType mysql.IDataTypeContext) {
	tp := dataType.GetParser().GetTokenStream().GetTextFromRuleContext(dataType)
	column := checker.catalog.Origin.FindColumn(&catalog.ColumnFind{
		TableName:  tableName,
		ColumnName: columnName,
	})

	if column == nil {
		return
	}

	if normalizeColumnType(column.Type()) != normalizeColumnType(tp) {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  checker.level,
			Code:    advisor.ChangeColumnType,
			Title:   checker.title,
			Content: fmt.Sprintf("\"%s\" changes column type", checker.text),
			Line:    checker.baseLine + dataType.GetStart().GetLine(),
		})
	}
}
