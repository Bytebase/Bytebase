package mysql

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/pingcap/tidb/parser/ast"
	"github.com/pkg/errors"

	"github.com/bytebase/bytebase/backend/plugin/advisor"
	"github.com/bytebase/bytebase/backend/plugin/advisor/catalog"
	"github.com/bytebase/bytebase/backend/plugin/advisor/db"
)

var (
	_ advisor.Advisor = (*ColumnDisallowDropIndexAdvisor)(nil)
	_ ast.Visitor     = (*columnDisallowDropIndexChecker)(nil)
)

func init() {
	advisor.Register(db.MySQL, advisor.MySQLColumnDisallowDropIndex, &ColumnDisallowDropIndexAdvisor{})
	advisor.Register(db.TiDB, advisor.MySQLColumnDisallowDropIndex, &ColumnDisallowDropIndexAdvisor{})
	advisor.Register(db.MariaDB, advisor.MySQLColumnDisallowDropIndex, &ColumnDisallowDropIndexAdvisor{})
	advisor.Register(db.OceanBase, advisor.MySQLColumnDisallowDropIndex, &ColumnDisallowDropIndexAdvisor{})
}

// ColumnDisallowDropIndexAdvisor is the advisor checking for disallow CHANGE COLUMN statement.
type ColumnDisallowDropIndexAdvisor struct {
}

// Check checks for disallow CHANGE COLUMN statement.
func (*ColumnDisallowDropIndexAdvisor) Check(ctx advisor.Context, _ string) ([]advisor.Advice, error) {
	stmtList, ok := ctx.AST.([]ast.StmtNode)
	if !ok {
		return nil, errors.Errorf("failed to convert to StmtNode")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}

	checker := &columnDisallowDropIndexChecker{
		level:   level,
		title:   string(ctx.Rule.Type),
		tables:  make(tableState),
		catalog: ctx.Catalog,
	}

	for _, stmt := range stmtList {
		checker.text = stmt.Text()
		checker.line = stmt.OriginTextPosition()
		(stmt).Accept(checker)
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}

	return checker.adviceList, nil
}

type columnDisallowDropIndexChecker struct {
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
	text       string
	tables     tableState // the bool mean whether the table is indexed
	catalog    *catalog.Finder
	line       int
}

func (checker *columnDisallowDropIndexChecker) Enter(in ast.Node) (ast.Node, bool) {
	switch node := in.(type) {
	case *ast.CreateTableStmt:
		checker.addIndexColumn(node)
	case *ast.AlterTableStmt:
		return checker.dropColumn(node)
	}
	return in, false
}

func (*columnDisallowDropIndexChecker) Leave(in ast.Node) (ast.Node, bool) {
	return in, true
}

func (checker *columnDisallowDropIndexChecker) dropColumn(in ast.Node) (ast.Node, bool) {
	if node, ok := in.(*ast.AlterTableStmt); ok {
		for _, spec := range node.Specs {
			if spec.Tp == ast.AlterTableDropColumn {
				table := node.Table.Name.O

				index := checker.catalog.Origin.Index(&catalog.TableIndexFind{
					SchemaName: "",
					TableName:  table,
				})
				if index == nil {
					continue
				}
				if checker.tables[table] == nil {
					checker.tables[table] = make(columnSet)
				}
				for _, indexColumn := range *index {
					for _, column := range indexColumn.ExpressionList() {
						checker.tables[table][column] = true
					}
				}

				colName := spec.OldColumnName.Name.String()
				if !checker.canDrop(table, colName) {
					checker.adviceList = append(checker.adviceList, advisor.Advice{
						Status:  checker.level,
						Code:    advisor.DropIndexColumn,
						Title:   checker.title,
						Content: fmt.Sprintf("`%s`.`%s` cannot drop index column", table, colName),
						Line:    checker.line,
					})
				}
			}
		}
	}
	return in, false
}

func (checker *columnDisallowDropIndexChecker) addIndexColumn(in ast.Node) {
	if node, ok := in.(*ast.CreateTableStmt); ok {
		for _, spec := range node.Constraints {
			if spec.Tp == ast.ConstraintIndex {
				for _, key := range spec.Keys {
					table := node.Table.Name.O
					if checker.tables[table] == nil {
						checker.tables[table] = make(columnSet)
					}
					checker.tables[table][key.Column.Name.O] = true
				}
			}
		}
	}
}

func (checker *columnDisallowDropIndexChecker) canDrop(table string, column string) bool {
	if _, ok := checker.tables[table][column]; ok {
		return false
	}
	return true
}
