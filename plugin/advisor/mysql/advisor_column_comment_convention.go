package mysql

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/bytebase/bytebase/plugin/advisor"
	"github.com/bytebase/bytebase/plugin/advisor/db"
	"github.com/bytebase/bytebase/plugin/advisor/mysql/collector"
)

var (
	_ advisor.Advisor = (*ColumnCommentConventionAdvisor)(nil)
)

func init() {
	advisor.Register(db.MySQL, advisor.MySQLColumnCommentConvention, &ColumnCommentConventionAdvisor{})
	advisor.Register(db.TiDB, advisor.MySQLColumnCommentConvention, &ColumnCommentConventionAdvisor{})
}

// ColumnCommentConventionAdvisor is the advisor checking for column comment convention.
type ColumnCommentConventionAdvisor struct {
}

// Check checks for column comment convention.
func (*ColumnCommentConventionAdvisor) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement, ctx.Charset, ctx.Collation)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	payload, err := advisor.UnmarshalCommentConventionRulePayload(ctx.Rule.Payload)
	if err != nil {
		return nil, err
	}
	title := string(ctx.Rule.Type)

	c := collector.NewColumnCollector(collector.CollectionContext{
		Flag: collector.CollectionFlagCreateTable |
			collector.CollectionFlagAddColumn |
			collector.CollectionFlagChangeColumn |
			collector.CollectionFlagModifyColumn,
		Level:   level,
		Replace: true,
	}, ctx.Catalog)

	c.Collect(stmtList)

	return c.GenerateAdvice(func(c collector.Column) []advisor.Advice {
		if c == nil {
			return nil
		}
		if len(c.Comment()) == 0 {
			return []advisor.Advice{
				{
					Status:  level,
					Code:    advisor.NoColumnComment,
					Title:   title,
					Content: fmt.Sprintf("Column `%s`.`%s` requires comments", c.Table(), c.Name()),
					Line:    c.Line(),
				},
			}
		}
		if payload.MaxLength >= 0 && len(c.Comment()) > payload.MaxLength {
			return []advisor.Advice{
				{
					Status:  level,
					Code:    advisor.ColumnCommentTooLong,
					Title:   title,
					Content: fmt.Sprintf("The length of column `%s`.`%s` comment should be within %d characters", c.Table(), c.Name(), payload.MaxLength),
					Line:    c.Line(),
				},
			}
		}
		return nil
	}), nil
}
