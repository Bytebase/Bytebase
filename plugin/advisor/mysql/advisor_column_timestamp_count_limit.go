package mysql

// Framework code is generated by the generator.

import (
	"fmt"
	"sort"

	"github.com/pingcap/tidb/parser/ast"
	"github.com/pingcap/tidb/parser/mysql"

	"github.com/bytebase/bytebase/plugin/advisor"
	"github.com/bytebase/bytebase/plugin/advisor/catalog"
	"github.com/bytebase/bytebase/plugin/advisor/db"
)

var (
	_ advisor.Advisor = (*ColumnTimestampCountLimitAdvisor)(nil)
	_ ast.Visitor     = (*columnTimestampCountLimitChecker)(nil)
)

func init() {
	advisor.Register(db.MySQL, advisor.MySQLTimestampColumnCountLimit, &ColumnTimestampCountLimitAdvisor{})
	advisor.Register(db.TiDB, advisor.MySQLTimestampColumnCountLimit, &ColumnTimestampCountLimitAdvisor{})
}

// ColumnTimestampCountLimitAdvisor is the advisor checking for timestamp column count limit.
type ColumnTimestampCountLimitAdvisor struct {
}

// Check checks for timestamp column count limit.
func (*ColumnTimestampCountLimitAdvisor) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement, ctx.Charset, ctx.Collation)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	payload, err := advisor.UnmarshalNumberTypeRulePayload(ctx.Rule.Payload)
	if err != nil {
		return nil, err
	}
	checker := &columnTimestampCountLimitChecker{
		level:    level,
		title:    string(ctx.Rule.Type),
		tableSet: make(map[string]tableData),
		maximum:  payload.Number,
		catalog:  ctx.Catalog,
	}

	for _, stmt := range stmtList {
		checker.text = stmt.Text()
		checker.line = stmt.OriginTextPosition()
		(stmt).Accept(checker)
	}

	return checker.generateAdvice(), nil
}

type columnTimestampCountLimitChecker struct {
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
	text       string
	line       int
	tableSet   map[string]tableData
	catalog    *catalog.Finder
	maximum    int
}

func (checker *columnTimestampCountLimitChecker) generateAdvice() []advisor.Advice {
	var tableList []tableData
	for _, table := range checker.tableSet {
		tableList = append(tableList, table)
	}
	sort.Slice(tableList, func(i, j int) bool {
		return tableList[i].line < tableList[j].line
	})

	for _, table := range tableList {
		count := checker.catalog.Final.CountColumn(&catalog.ColumnCount{
			TableName:  table.tableName,
			ColumnType: "timestamp",
		})
		if count > checker.maximum {
			checker.adviceList = append(checker.adviceList, advisor.Advice{
				Status:  checker.level,
				Code:    advisor.TimestampCountExceedsLimit,
				Title:   checker.title,
				Content: fmt.Sprintf("Table `%s` has %d timestamp columns. The count greater than %d.", table.tableName, count, checker.maximum),
				Line:    table.line,
			})
		}
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList
}

// Enter implements the ast.Visitor interface.
func (checker *columnTimestampCountLimitChecker) Enter(in ast.Node) (ast.Node, bool) {
	switch node := in.(type) {
	case *ast.CreateTableStmt:
		for _, column := range node.Cols {
			if column.Tp.GetType() == mysql.TypeTimestamp {
				tableName := node.Table.Name.O
				checker.tableSet[tableName] = tableData{
					tableName: tableName,
					line:      node.OriginTextPosition(),
				}
				break
			}
		}
	case *ast.AlterTableStmt:
		tableName := node.Table.Name.O
		for _, spec := range node.Specs {
			switch spec.Tp {
			case ast.AlterTableAddColumns:
				for _, column := range spec.NewColumns {
					if column.Tp.GetType() == mysql.TypeTimestamp {
						checker.tableSet[tableName] = tableData{
							tableName: tableName,
							line:      node.OriginTextPosition(),
						}
					}
				}
			case ast.AlterTableChangeColumn, ast.AlterTableModifyColumn:
				if spec.NewColumns[0].Tp.GetType() == mysql.TypeTimestamp {
					checker.tableSet[tableName] = tableData{
						tableName: tableName,
						line:      node.OriginTextPosition(),
					}
				}
			}
		}
	}

	return in, false
}

// Leave implements the ast.Visitor interface.
func (*columnTimestampCountLimitChecker) Leave(in ast.Node) (ast.Node, bool) {
	return in, true
}
