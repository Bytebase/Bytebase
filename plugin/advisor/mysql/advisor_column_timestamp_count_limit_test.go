package mysql

// Framework code is generated by the generator.

import (
	"encoding/json"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/bytebase/bytebase/plugin/advisor"
)

func TestColumnTimestampCountLimit(t *testing.T) {
	tests := []advisor.TestCase{
		{
			Statement: `CREATE TABLE t(a timestamp)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `CREATE TABLE t(a timestamp, b timestamp)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.TimestampCountExceedsLimit,
					Title:   "column.timestamp-count-limit",
					Content: "Table `t` has 2 timestamp columns. The count greater than 1.",
					Line:    1,
				},
			},
		},
		{
			Statement: `
				ALTER TABLE tech_book ADD COLUMN a timestamp;
				ALTER TABLE tech_book ADD COLUMN b timestamp;
			`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.TimestampCountExceedsLimit,
					Title:   "column.timestamp-count-limit",
					Content: "Table `tech_book` has 2 timestamp columns. The count greater than 1.",
					Line:    3,
				},
			},
		},
		{
			Statement: `
				ALTER TABLE tech_book MODIFY COLUMN id timestamp;
				ALTER TABLE tech_book MODIFY COLUMN name timestamp;
			`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.TimestampCountExceedsLimit,
					Title:   "column.timestamp-count-limit",
					Content: "Table `tech_book` has 2 timestamp columns. The count greater than 1.",
					Line:    3,
				},
			},
		},
	}

	payload, err := json.Marshal(advisor.NumberTypeRulePayload{
		Number: 1,
	})
	require.NoError(t, err)
	advisor.RunSQLReviewRuleTests(t, tests, &ColumnTimestampCountLimitAdvisor{}, &advisor.SQLReviewRule{
		Type:    advisor.SchemaRuleTimestampColumnCountLimit,
		Level:   advisor.SchemaRuleLevelWarning,
		Payload: string(payload),
	}, advisor.MockMySQLDatabase)
}
