package mysql

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/pingcap/tidb/parser/ast"
	"github.com/pingcap/tidb/parser/mysql"

	"github.com/bytebase/bytebase/plugin/advisor"
	"github.com/bytebase/bytebase/plugin/advisor/db"
)

var (
	_ advisor.Advisor = (*ColumnMaximumCharLengthAdvisor)(nil)
	_ ast.Visitor     = (*columnMaximumCharLengthChecker)(nil)
)

func init() {
	advisor.Register(db.MySQL, advisor.MySQLColumnMaximumCharLength, &ColumnMaximumCharLengthAdvisor{})
	advisor.Register(db.TiDB, advisor.MySQLColumnMaximumCharLength, &ColumnMaximumCharLengthAdvisor{})
}

// ColumnMaximumCharLengthAdvisor is the advisor checking for max char length.
type ColumnMaximumCharLengthAdvisor struct {
}

// Check checks for maximum char length.
func (*ColumnMaximumCharLengthAdvisor) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement, ctx.Charset, ctx.Collation)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	payload, err := advisor.UnmarshalNumberLimitRulePayload(ctx.Rule.Payload)
	if err != nil {
		return nil, err
	}
	checker := &columnMaximumCharLengthChecker{
		level:   level,
		title:   string(ctx.Rule.Type),
		maximum: payload.Number,
	}

	for _, stmt := range stmtList {
		checker.text = stmt.Text()
		checker.line = stmt.OriginTextPosition()
		(stmt).Accept(checker)
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type columnMaximumCharLengthChecker struct {
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
	text       string
	line       int
	maximum    int
}

// Enter implements the ast.Visitor interface.
func (checker *columnMaximumCharLengthChecker) Enter(in ast.Node) (ast.Node, bool) {
	var tableName, columnName string
	var line int
	switch node := in.(type) {
	case *ast.CreateTableStmt:
		for _, column := range node.Cols {
			charLength := getCharLength(column)
			if checker.maximum > 0 && charLength > checker.maximum {
				tableName = node.Table.Name.O
				columnName = column.Name.Name.O
				line = column.OriginTextPosition()
				break
			}
		}
	case *ast.AlterTableStmt:
		for _, spec := range node.Specs {
			switch spec.Tp {
			case ast.AlterTableAddColumns:
				for _, column := range spec.NewColumns {
					charLength := getCharLength(column)
					if checker.maximum > 0 && charLength > checker.maximum {
						tableName = node.Table.Name.O
						columnName = column.Name.Name.O
						line = node.OriginTextPosition()
					}
				}
			case ast.AlterTableChangeColumn, ast.AlterTableModifyColumn:
				charLength := getCharLength(spec.NewColumns[0])
				if checker.maximum > 0 && charLength > checker.maximum {
					tableName = node.Table.Name.O
					columnName = spec.NewColumns[0].Name.Name.O
					line = node.OriginTextPosition()
				}
			}
			if tableName != "" {
				break
			}
		}
	}

	if tableName != "" {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  checker.level,
			Code:    advisor.CharLengthExceedsLimit,
			Title:   checker.title,
			Content: fmt.Sprintf("The length of the CHAR column `%s` is bigger than %d, please use VARCHAR instead", columnName, checker.maximum),
			Line:    line,
		})
	}

	return in, false
}

// Leave implements the ast.Visitor interface.
func (*columnMaximumCharLengthChecker) Leave(in ast.Node) (ast.Node, bool) {
	return in, true
}

func getCharLength(column *ast.ColumnDef) int {
	if column.Tp.GetType() == mysql.TypeString {
		return column.Tp.GetFlen()
	}
	return 0
}
