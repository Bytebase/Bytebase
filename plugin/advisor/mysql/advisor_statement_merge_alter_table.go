package mysql

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/pingcap/tidb/parser/ast"

	"github.com/bytebase/bytebase/plugin/advisor"
	"github.com/bytebase/bytebase/plugin/advisor/db"
)

var (
	_ advisor.Advisor = (*StatementMergeAlterTableAdvisor)(nil)
)

func init() {
	advisor.Register(db.MySQL, advisor.MySQLMergeAlterTable, &StatementMergeAlterTableAdvisor{})
	advisor.Register(db.TiDB, advisor.MySQLMergeAlterTable, &StatementMergeAlterTableAdvisor{})
}

// StatementMergeAlterTableAdvisor is the advisor checking for merging adjacent ALTER TABLE statements.
type StatementMergeAlterTableAdvisor struct {
}

// Check checks for merging adjacent ALTER TABLE statements.
func (*StatementMergeAlterTableAdvisor) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement, ctx.Charset, ctx.Collation)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &statementMergeAlterTableChecker{
		level:                   level,
		title:                   string(ctx.Rule.Type),
		adjacentAlterTableCount: 0,
	}

	for _, stmt := range stmtList {
		checker.Check(stmt)
		checker.lastText = stmt.Text()
		checker.lastLine = stmt.OriginTextPosition()
	}

	if checker.adjacentAlterTableCount > 1 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  checker.level,
			Code:    advisor.StatementAdjacentAlterTable,
			Title:   checker.title,
			Content: fmt.Sprintf("Adjacent ALTER TABLE statements before \"%s\"", checker.lastText),
			Line:    checker.lastLine,
		})
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type statementMergeAlterTableChecker struct {
	adviceList              []advisor.Advice
	level                   advisor.Status
	title                   string
	lastText                string
	lastLine                int
	adjacentAlterTableCount int
	tableName               string
}

// Check checks for mergeing alter table statements.
func (checker *statementMergeAlterTableChecker) Check(in ast.Node) {
	alterTable, ok := in.(*ast.AlterTableStmt)
	canMerge := false
	if ok && alterTable.Table.Name.L == checker.tableName {
		canMerge = true
	}
	if !canMerge {
		if checker.adjacentAlterTableCount > 1 {
			checker.adviceList = append(checker.adviceList, advisor.Advice{
				Status:  checker.level,
				Code:    advisor.StatementAdjacentAlterTable,
				Title:   checker.title,
				Content: fmt.Sprintf("Adjacent ALTER TABLE statements before \"%s\"", checker.lastText),
				Line:    checker.lastLine,
			})
		}
		checker.adjacentAlterTableCount = 0
	}

	if ok {
		checker.adjacentAlterTableCount++
		checker.tableName = alterTable.Table.Name.L
	}
}
