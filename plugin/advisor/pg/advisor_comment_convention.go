package pg

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/bytebase/bytebase/plugin/advisor"
	"github.com/bytebase/bytebase/plugin/advisor/db"
	"github.com/bytebase/bytebase/plugin/parser/ast"
)

var (
	_ advisor.Advisor = (*CommentConventionAdvisor)(nil)
	_ ast.Visitor     = (*commentConventionChecker)(nil)
)

func init() {
	advisor.Register(db.Postgres, advisor.PostgreSQLCommentConvention, &CommentConventionAdvisor{})
}

// CommentConventionAdvisor is the advisor checking for column comment convention.
type CommentConventionAdvisor struct {
}

// Check checks for column comment convention.
func (*CommentConventionAdvisor) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	payload, err := advisor.UnmarshalCommentConventionRulePayload(ctx.Rule.Payload)
	if err != nil {
		return nil, err
	}
	checker := &commentConventionChecker{
		level:     level,
		title:     string(ctx.Rule.Type),
		maxLength: payload.MaxLength,
	}

	for _, stmt := range stmtList {
		ast.Walk(checker, stmt)
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type commentConventionChecker struct {
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
	maxLength  int
}

// Visit implements the ast.Visitor interface.
func (checker *commentConventionChecker) Visit(node ast.Node) ast.Visitor {
	type columnData struct {
		comment string
		line    int
	}
	var column columnData

	if n, ok := node.(*ast.CommentStmt); ok {
		column = columnData{
			comment: n.Comment,
			line:    n.LastLine(),
		}
	}

	if checker.maxLength > 0 && len(column.comment) > checker.maxLength {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  checker.level,
			Code:    advisor.CommentTooLong,
			Title:   checker.title,
			Content: fmt.Sprintf("The length of comment should be within %d characters", checker.maxLength),
			Line:    column.line,
		})
	}

	return checker
}
