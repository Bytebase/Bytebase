// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/database_role_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseRoleServiceClient is the client API for DatabaseRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseRoleServiceClient interface {
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*DatabaseRole, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*DatabaseRole, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*DatabaseRole, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UndeleteRole(ctx context.Context, in *UndeleteRoleRequest, opts ...grpc.CallOption) (*DatabaseRole, error)
}

type databaseRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseRoleServiceClient(cc grpc.ClientConnInterface) DatabaseRoleServiceClient {
	return &databaseRoleServiceClient{cc}
}

func (c *databaseRoleServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*DatabaseRole, error) {
	out := new(DatabaseRole)
	err := c.cc.Invoke(ctx, "/bytebase.v1.DatabaseRoleService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRoleServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/bytebase.v1.DatabaseRoleService/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRoleServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*DatabaseRole, error) {
	out := new(DatabaseRole)
	err := c.cc.Invoke(ctx, "/bytebase.v1.DatabaseRoleService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRoleServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*DatabaseRole, error) {
	out := new(DatabaseRole)
	err := c.cc.Invoke(ctx, "/bytebase.v1.DatabaseRoleService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRoleServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bytebase.v1.DatabaseRoleService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseRoleServiceClient) UndeleteRole(ctx context.Context, in *UndeleteRoleRequest, opts ...grpc.CallOption) (*DatabaseRole, error) {
	out := new(DatabaseRole)
	err := c.cc.Invoke(ctx, "/bytebase.v1.DatabaseRoleService/UndeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseRoleServiceServer is the server API for DatabaseRoleService service.
// All implementations must embed UnimplementedDatabaseRoleServiceServer
// for forward compatibility
type DatabaseRoleServiceServer interface {
	GetRole(context.Context, *GetRoleRequest) (*DatabaseRole, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*DatabaseRole, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*DatabaseRole, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	UndeleteRole(context.Context, *UndeleteRoleRequest) (*DatabaseRole, error)
	mustEmbedUnimplementedDatabaseRoleServiceServer()
}

// UnimplementedDatabaseRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseRoleServiceServer struct {
}

func (UnimplementedDatabaseRoleServiceServer) GetRole(context.Context, *GetRoleRequest) (*DatabaseRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedDatabaseRoleServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedDatabaseRoleServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*DatabaseRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedDatabaseRoleServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*DatabaseRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedDatabaseRoleServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedDatabaseRoleServiceServer) UndeleteRole(context.Context, *UndeleteRoleRequest) (*DatabaseRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteRole not implemented")
}
func (UnimplementedDatabaseRoleServiceServer) mustEmbedUnimplementedDatabaseRoleServiceServer() {}

// UnsafeDatabaseRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseRoleServiceServer will
// result in compilation errors.
type UnsafeDatabaseRoleServiceServer interface {
	mustEmbedUnimplementedDatabaseRoleServiceServer()
}

func RegisterDatabaseRoleServiceServer(s grpc.ServiceRegistrar, srv DatabaseRoleServiceServer) {
	s.RegisterService(&DatabaseRoleService_ServiceDesc, srv)
}

func _DatabaseRoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytebase.v1.DatabaseRoleService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRoleServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRoleService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRoleServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytebase.v1.DatabaseRoleService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRoleServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytebase.v1.DatabaseRoleService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRoleServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytebase.v1.DatabaseRoleService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRoleServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytebase.v1.DatabaseRoleService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRoleServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseRoleService_UndeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseRoleServiceServer).UndeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytebase.v1.DatabaseRoleService/UndeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseRoleServiceServer).UndeleteRole(ctx, req.(*UndeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseRoleService_ServiceDesc is the grpc.ServiceDesc for DatabaseRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.DatabaseRoleService",
	HandlerType: (*DatabaseRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _DatabaseRoleService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _DatabaseRoleService_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _DatabaseRoleService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _DatabaseRoleService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _DatabaseRoleService_DeleteRole_Handler,
		},
		{
			MethodName: "UndeleteRole",
			Handler:    _DatabaseRoleService_UndeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/database_role_service.proto",
}
