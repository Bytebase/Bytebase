// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        (unknown)
// source: v1/risk_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	v1alpha1 "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RiskAction_Type int32

const (
	RiskAction_TYPE_UNSPECIFIED         RiskAction_Type = 0
	RiskAction_CHOOSE_APPROVAL_TEMPLATE RiskAction_Type = 1
)

// Enum value maps for RiskAction_Type.
var (
	RiskAction_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "CHOOSE_APPROVAL_TEMPLATE",
	}
	RiskAction_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":         0,
		"CHOOSE_APPROVAL_TEMPLATE": 1,
	}
)

func (x RiskAction_Type) Enum() *RiskAction_Type {
	p := new(RiskAction_Type)
	*p = x
	return p
}

func (x RiskAction_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskAction_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_risk_service_proto_enumTypes[0].Descriptor()
}

func (RiskAction_Type) Type() protoreflect.EnumType {
	return &file_v1_risk_service_proto_enumTypes[0]
}

func (x RiskAction_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskAction_Type.Descriptor instead.
func (RiskAction_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_risk_service_proto_rawDescGZIP(), []int{7, 0}
}

type GetRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the risk to retrieve.
	// Format: risks/{risk}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRiskRequest) Reset() {
	*x = GetRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_risk_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskRequest) ProtoMessage() {}

func (x *GetRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_risk_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskRequest.ProtoReflect.Descriptor instead.
func (*GetRiskRequest) Descriptor() ([]byte, []int) {
	return file_v1_risk_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetRiskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of risks to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 risks will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRisks` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `LiskRisks` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Show deleted risks if specified.
	ShowDeleted bool `protobuf:"varint,3,opt,name=show_deleted,json=showDeleted,proto3" json:"show_deleted,omitempty"`
}

func (x *ListRisksRequest) Reset() {
	*x = ListRisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_risk_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRisksRequest) ProtoMessage() {}

func (x *ListRisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_risk_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRisksRequest.ProtoReflect.Descriptor instead.
func (*ListRisksRequest) Descriptor() ([]byte, []int) {
	return file_v1_risk_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListRisksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRisksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRisksRequest) GetShowDeleted() bool {
	if x != nil {
		return x.ShowDeleted
	}
	return false
}

type ListRisksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Risks []*Risk `protobuf:"bytes,1,rep,name=risks,proto3" json:"risks,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRisksResponse) Reset() {
	*x = ListRisksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_risk_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRisksResponse) ProtoMessage() {}

func (x *ListRisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_risk_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRisksResponse.ProtoReflect.Descriptor instead.
func (*ListRisksResponse) Descriptor() ([]byte, []int) {
	return file_v1_risk_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListRisksResponse) GetRisks() []*Risk {
	if x != nil {
		return x.Risks
	}
	return nil
}

func (x *ListRisksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddRiskConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the risk to add the risk condition to.
	// Format: risks/{risk}
	Risk string `protobuf:"bytes,1,opt,name=risk,proto3" json:"risk,omitempty"`
	// The risk condition to add.
	RiskCondition *RiskCondition `protobuf:"bytes,2,opt,name=risk_condition,json=riskCondition,proto3" json:"risk_condition,omitempty"`
}

func (x *AddRiskConditionRequest) Reset() {
	*x = AddRiskConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_risk_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRiskConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRiskConditionRequest) ProtoMessage() {}

func (x *AddRiskConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_risk_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRiskConditionRequest.ProtoReflect.Descriptor instead.
func (*AddRiskConditionRequest) Descriptor() ([]byte, []int) {
	return file_v1_risk_service_proto_rawDescGZIP(), []int{3}
}

func (x *AddRiskConditionRequest) GetRisk() string {
	if x != nil {
		return x.Risk
	}
	return ""
}

func (x *AddRiskConditionRequest) GetRiskCondition() *RiskCondition {
	if x != nil {
		return x.RiskCondition
	}
	return nil
}

type RemoveRiskConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the risk to remove the risk condition from.
	// Format: risks/{risk}
	Risk string `protobuf:"bytes,1,opt,name=risk,proto3" json:"risk,omitempty"`
	// The risk condition to remove. Identified by its name.
	RiskCondition *RiskCondition `protobuf:"bytes,2,opt,name=risk_condition,json=riskCondition,proto3" json:"risk_condition,omitempty"`
}

func (x *RemoveRiskConditionRequest) Reset() {
	*x = RemoveRiskConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_risk_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRiskConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRiskConditionRequest) ProtoMessage() {}

func (x *RemoveRiskConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_risk_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRiskConditionRequest.ProtoReflect.Descriptor instead.
func (*RemoveRiskConditionRequest) Descriptor() ([]byte, []int) {
	return file_v1_risk_service_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveRiskConditionRequest) GetRisk() string {
	if x != nil {
		return x.Risk
	}
	return ""
}

func (x *RemoveRiskConditionRequest) GetRiskCondition() *RiskCondition {
	if x != nil {
		return x.RiskCondition
	}
	return nil
}

type UpdateRiskConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the risk which owns the risk condition to be updated.
	// Format: risks/{risk}
	Risk string `protobuf:"bytes,1,opt,name=risk,proto3" json:"risk,omitempty"`
	// The risk condition to modify.
	// Identified by its name.
	RiskCondition *RiskCondition `protobuf:"bytes,2,opt,name=risk_condition,json=riskCondition,proto3" json:"risk_condition,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRiskConditionRequest) Reset() {
	*x = UpdateRiskConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_risk_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRiskConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRiskConditionRequest) ProtoMessage() {}

func (x *UpdateRiskConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_risk_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRiskConditionRequest.ProtoReflect.Descriptor instead.
func (*UpdateRiskConditionRequest) Descriptor() ([]byte, []int) {
	return file_v1_risk_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRiskConditionRequest) GetRisk() string {
	if x != nil {
		return x.Risk
	}
	return ""
}

func (x *UpdateRiskConditionRequest) GetRiskCondition() *RiskCondition {
	if x != nil {
		return x.RiskCondition
	}
	return nil
}

func (x *UpdateRiskConditionRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type Risk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format: risks/{risk}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// system-generated unique identifier.
	Uid         string           `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Title       string           `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string           `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Level       int64            `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Actions     []*RiskAction    `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`
	Conditions  []*RiskCondition `protobuf:"bytes,7,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *Risk) Reset() {
	*x = Risk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_risk_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Risk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Risk) ProtoMessage() {}

func (x *Risk) ProtoReflect() protoreflect.Message {
	mi := &file_v1_risk_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Risk.ProtoReflect.Descriptor instead.
func (*Risk) Descriptor() ([]byte, []int) {
	return file_v1_risk_service_proto_rawDescGZIP(), []int{6}
}

func (x *Risk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Risk) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Risk) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Risk) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Risk) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Risk) GetActions() []*RiskAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Risk) GetConditions() []*RiskCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type RiskAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type RiskAction_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bytebase.v1.RiskAction_Type" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*RiskAction_ApprovalTemplate
	Payload isRiskAction_Payload `protobuf_oneof:"payload"`
}

func (x *RiskAction) Reset() {
	*x = RiskAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_risk_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAction) ProtoMessage() {}

func (x *RiskAction) ProtoReflect() protoreflect.Message {
	mi := &file_v1_risk_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAction.ProtoReflect.Descriptor instead.
func (*RiskAction) Descriptor() ([]byte, []int) {
	return file_v1_risk_service_proto_rawDescGZIP(), []int{7}
}

func (x *RiskAction) GetType() RiskAction_Type {
	if x != nil {
		return x.Type
	}
	return RiskAction_TYPE_UNSPECIFIED
}

func (m *RiskAction) GetPayload() isRiskAction_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RiskAction) GetApprovalTemplate() string {
	if x, ok := x.GetPayload().(*RiskAction_ApprovalTemplate); ok {
		return x.ApprovalTemplate
	}
	return ""
}

type isRiskAction_Payload interface {
	isRiskAction_Payload()
}

type RiskAction_ApprovalTemplate struct {
	// Format: approvalTemplates/{approvalTemplate}
	ApprovalTemplate string `protobuf:"bytes,2,opt,name=approval_template,json=approvalTemplate,proto3,oneof"`
}

func (*RiskAction_ApprovalTemplate) isRiskAction_Payload() {}

type RiskCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format: risks/{risk}/riskConditions/{riskCondition}
	Name        string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uid         string               `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Title       string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Expression  *v1alpha1.ParsedExpr `protobuf:"bytes,5,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *RiskCondition) Reset() {
	*x = RiskCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_risk_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskCondition) ProtoMessage() {}

func (x *RiskCondition) ProtoReflect() protoreflect.Message {
	mi := &file_v1_risk_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskCondition.ProtoReflect.Descriptor instead.
func (*RiskCondition) Descriptor() ([]byte, []int) {
	return file_v1_risk_service_proto_rawDescGZIP(), []int{8}
}

func (x *RiskCondition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RiskCondition) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RiskCondition) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RiskCondition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RiskCondition) GetExpression() *v1alpha1.ParsedExpr {
	if x != nil {
		return x.Expression
	}
	return nil
}

var File_v1_risk_service_proto protoreflect.FileDescriptor

var file_v1_risk_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x22, 0x64, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7a, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x52, 0x69, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xee,
	0x01, 0x0a, 0x04, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x31, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xb4, 0x01, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2d, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22,
	0x3a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0xd8, 0x04, 0x0a, 0x0b, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1b, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x22, 0x21, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0x60, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x1d, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0xda, 0x41, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x73, 0x6b,
	0x73, 0x12, 0x7b, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x72, 0x69, 0x73, 0x6b, 0x3d, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x61, 0x64,
	0x64, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x72, 0x69, 0x73, 0x6b, 0x3d, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x2a,
	0x7d, 0x3a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x3a, 0x01, 0x2a, 0x32, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x72, 0x69, 0x73, 0x6b, 0x3d,
	0x72, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x5a, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_risk_service_proto_rawDescOnce sync.Once
	file_v1_risk_service_proto_rawDescData = file_v1_risk_service_proto_rawDesc
)

func file_v1_risk_service_proto_rawDescGZIP() []byte {
	file_v1_risk_service_proto_rawDescOnce.Do(func() {
		file_v1_risk_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_risk_service_proto_rawDescData)
	})
	return file_v1_risk_service_proto_rawDescData
}

var file_v1_risk_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_risk_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_v1_risk_service_proto_goTypes = []interface{}{
	(RiskAction_Type)(0),               // 0: bytebase.v1.RiskAction.Type
	(*GetRiskRequest)(nil),             // 1: bytebase.v1.GetRiskRequest
	(*ListRisksRequest)(nil),           // 2: bytebase.v1.ListRisksRequest
	(*ListRisksResponse)(nil),          // 3: bytebase.v1.ListRisksResponse
	(*AddRiskConditionRequest)(nil),    // 4: bytebase.v1.AddRiskConditionRequest
	(*RemoveRiskConditionRequest)(nil), // 5: bytebase.v1.RemoveRiskConditionRequest
	(*UpdateRiskConditionRequest)(nil), // 6: bytebase.v1.UpdateRiskConditionRequest
	(*Risk)(nil),                       // 7: bytebase.v1.Risk
	(*RiskAction)(nil),                 // 8: bytebase.v1.RiskAction
	(*RiskCondition)(nil),              // 9: bytebase.v1.RiskCondition
	(*fieldmaskpb.FieldMask)(nil),      // 10: google.protobuf.FieldMask
	(*v1alpha1.ParsedExpr)(nil),        // 11: google.api.expr.v1alpha1.ParsedExpr
}
var file_v1_risk_service_proto_depIdxs = []int32{
	7,  // 0: bytebase.v1.ListRisksResponse.risks:type_name -> bytebase.v1.Risk
	9,  // 1: bytebase.v1.AddRiskConditionRequest.risk_condition:type_name -> bytebase.v1.RiskCondition
	9,  // 2: bytebase.v1.RemoveRiskConditionRequest.risk_condition:type_name -> bytebase.v1.RiskCondition
	9,  // 3: bytebase.v1.UpdateRiskConditionRequest.risk_condition:type_name -> bytebase.v1.RiskCondition
	10, // 4: bytebase.v1.UpdateRiskConditionRequest.update_mask:type_name -> google.protobuf.FieldMask
	8,  // 5: bytebase.v1.Risk.actions:type_name -> bytebase.v1.RiskAction
	9,  // 6: bytebase.v1.Risk.conditions:type_name -> bytebase.v1.RiskCondition
	0,  // 7: bytebase.v1.RiskAction.type:type_name -> bytebase.v1.RiskAction.Type
	11, // 8: bytebase.v1.RiskCondition.expression:type_name -> google.api.expr.v1alpha1.ParsedExpr
	1,  // 9: bytebase.v1.RiskService.GetRisk:input_type -> bytebase.v1.GetRiskRequest
	2,  // 10: bytebase.v1.RiskService.ListRisks:input_type -> bytebase.v1.ListRisksRequest
	4,  // 11: bytebase.v1.RiskService.AddRiskCondition:input_type -> bytebase.v1.AddRiskConditionRequest
	5,  // 12: bytebase.v1.RiskService.RemoveRiskCondition:input_type -> bytebase.v1.RemoveRiskConditionRequest
	6,  // 13: bytebase.v1.RiskService.UpdateRiskCondition:input_type -> bytebase.v1.UpdateRiskConditionRequest
	7,  // 14: bytebase.v1.RiskService.GetRisk:output_type -> bytebase.v1.Risk
	3,  // 15: bytebase.v1.RiskService.ListRisks:output_type -> bytebase.v1.ListRisksResponse
	7,  // 16: bytebase.v1.RiskService.AddRiskCondition:output_type -> bytebase.v1.Risk
	7,  // 17: bytebase.v1.RiskService.RemoveRiskCondition:output_type -> bytebase.v1.Risk
	7,  // 18: bytebase.v1.RiskService.UpdateRiskCondition:output_type -> bytebase.v1.Risk
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_v1_risk_service_proto_init() }
func file_v1_risk_service_proto_init() {
	if File_v1_risk_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_risk_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_risk_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_risk_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRisksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_risk_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRiskConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_risk_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRiskConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_risk_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRiskConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_risk_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Risk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_risk_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_risk_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_risk_service_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*RiskAction_ApprovalTemplate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_risk_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_risk_service_proto_goTypes,
		DependencyIndexes: file_v1_risk_service_proto_depIdxs,
		EnumInfos:         file_v1_risk_service_proto_enumTypes,
		MessageInfos:      file_v1_risk_service_proto_msgTypes,
	}.Build()
	File_v1_risk_service_proto = out.File
	file_v1_risk_service_proto_rawDesc = nil
	file_v1_risk_service_proto_goTypes = nil
	file_v1_risk_service_proto_depIdxs = nil
}
