// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: v1/sql_review_config_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SQLReviewService_CreateSQLReviewConfig_FullMethodName = "/bytebase.v1.SQLReviewService/CreateSQLReviewConfig"
	SQLReviewService_ListSQLReviewConfigs_FullMethodName  = "/bytebase.v1.SQLReviewService/ListSQLReviewConfigs"
	SQLReviewService_GetSQLReviewConfig_FullMethodName    = "/bytebase.v1.SQLReviewService/GetSQLReviewConfig"
	SQLReviewService_UpdateSQLReviewConfig_FullMethodName = "/bytebase.v1.SQLReviewService/UpdateSQLReviewConfig"
	SQLReviewService_DeleteSQLReviewConfig_FullMethodName = "/bytebase.v1.SQLReviewService/DeleteSQLReviewConfig"
)

// SQLReviewServiceClient is the client API for SQLReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQLReviewServiceClient interface {
	CreateSQLReviewConfig(ctx context.Context, in *CreateSQLReviewConfigRequest, opts ...grpc.CallOption) (*SQLReviewConfig, error)
	ListSQLReviewConfigs(ctx context.Context, in *ListSQLReviewConfigsRequest, opts ...grpc.CallOption) (*ListSQLReviewConfigsResponse, error)
	GetSQLReviewConfig(ctx context.Context, in *GetSQLReviewConfigRequest, opts ...grpc.CallOption) (*SQLReviewConfig, error)
	UpdateSQLReviewConfig(ctx context.Context, in *UpdateSQLReviewConfigRequest, opts ...grpc.CallOption) (*SQLReviewConfig, error)
	DeleteSQLReviewConfig(ctx context.Context, in *DeleteSQLReviewConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sQLReviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSQLReviewServiceClient(cc grpc.ClientConnInterface) SQLReviewServiceClient {
	return &sQLReviewServiceClient{cc}
}

func (c *sQLReviewServiceClient) CreateSQLReviewConfig(ctx context.Context, in *CreateSQLReviewConfigRequest, opts ...grpc.CallOption) (*SQLReviewConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SQLReviewConfig)
	err := c.cc.Invoke(ctx, SQLReviewService_CreateSQLReviewConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLReviewServiceClient) ListSQLReviewConfigs(ctx context.Context, in *ListSQLReviewConfigsRequest, opts ...grpc.CallOption) (*ListSQLReviewConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSQLReviewConfigsResponse)
	err := c.cc.Invoke(ctx, SQLReviewService_ListSQLReviewConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLReviewServiceClient) GetSQLReviewConfig(ctx context.Context, in *GetSQLReviewConfigRequest, opts ...grpc.CallOption) (*SQLReviewConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SQLReviewConfig)
	err := c.cc.Invoke(ctx, SQLReviewService_GetSQLReviewConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLReviewServiceClient) UpdateSQLReviewConfig(ctx context.Context, in *UpdateSQLReviewConfigRequest, opts ...grpc.CallOption) (*SQLReviewConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SQLReviewConfig)
	err := c.cc.Invoke(ctx, SQLReviewService_UpdateSQLReviewConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLReviewServiceClient) DeleteSQLReviewConfig(ctx context.Context, in *DeleteSQLReviewConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SQLReviewService_DeleteSQLReviewConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQLReviewServiceServer is the server API for SQLReviewService service.
// All implementations must embed UnimplementedSQLReviewServiceServer
// for forward compatibility
type SQLReviewServiceServer interface {
	CreateSQLReviewConfig(context.Context, *CreateSQLReviewConfigRequest) (*SQLReviewConfig, error)
	ListSQLReviewConfigs(context.Context, *ListSQLReviewConfigsRequest) (*ListSQLReviewConfigsResponse, error)
	GetSQLReviewConfig(context.Context, *GetSQLReviewConfigRequest) (*SQLReviewConfig, error)
	UpdateSQLReviewConfig(context.Context, *UpdateSQLReviewConfigRequest) (*SQLReviewConfig, error)
	DeleteSQLReviewConfig(context.Context, *DeleteSQLReviewConfigRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSQLReviewServiceServer()
}

// UnimplementedSQLReviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSQLReviewServiceServer struct {
}

func (UnimplementedSQLReviewServiceServer) CreateSQLReviewConfig(context.Context, *CreateSQLReviewConfigRequest) (*SQLReviewConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSQLReviewConfig not implemented")
}
func (UnimplementedSQLReviewServiceServer) ListSQLReviewConfigs(context.Context, *ListSQLReviewConfigsRequest) (*ListSQLReviewConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSQLReviewConfigs not implemented")
}
func (UnimplementedSQLReviewServiceServer) GetSQLReviewConfig(context.Context, *GetSQLReviewConfigRequest) (*SQLReviewConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSQLReviewConfig not implemented")
}
func (UnimplementedSQLReviewServiceServer) UpdateSQLReviewConfig(context.Context, *UpdateSQLReviewConfigRequest) (*SQLReviewConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSQLReviewConfig not implemented")
}
func (UnimplementedSQLReviewServiceServer) DeleteSQLReviewConfig(context.Context, *DeleteSQLReviewConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSQLReviewConfig not implemented")
}
func (UnimplementedSQLReviewServiceServer) mustEmbedUnimplementedSQLReviewServiceServer() {}

// UnsafeSQLReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQLReviewServiceServer will
// result in compilation errors.
type UnsafeSQLReviewServiceServer interface {
	mustEmbedUnimplementedSQLReviewServiceServer()
}

func RegisterSQLReviewServiceServer(s grpc.ServiceRegistrar, srv SQLReviewServiceServer) {
	s.RegisterService(&SQLReviewService_ServiceDesc, srv)
}

func _SQLReviewService_CreateSQLReviewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSQLReviewConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLReviewServiceServer).CreateSQLReviewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLReviewService_CreateSQLReviewConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLReviewServiceServer).CreateSQLReviewConfig(ctx, req.(*CreateSQLReviewConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLReviewService_ListSQLReviewConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSQLReviewConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLReviewServiceServer).ListSQLReviewConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLReviewService_ListSQLReviewConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLReviewServiceServer).ListSQLReviewConfigs(ctx, req.(*ListSQLReviewConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLReviewService_GetSQLReviewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSQLReviewConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLReviewServiceServer).GetSQLReviewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLReviewService_GetSQLReviewConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLReviewServiceServer).GetSQLReviewConfig(ctx, req.(*GetSQLReviewConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLReviewService_UpdateSQLReviewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSQLReviewConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLReviewServiceServer).UpdateSQLReviewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLReviewService_UpdateSQLReviewConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLReviewServiceServer).UpdateSQLReviewConfig(ctx, req.(*UpdateSQLReviewConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLReviewService_DeleteSQLReviewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSQLReviewConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLReviewServiceServer).DeleteSQLReviewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLReviewService_DeleteSQLReviewConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLReviewServiceServer).DeleteSQLReviewConfig(ctx, req.(*DeleteSQLReviewConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SQLReviewService_ServiceDesc is the grpc.ServiceDesc for SQLReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQLReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.SQLReviewService",
	HandlerType: (*SQLReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSQLReviewConfig",
			Handler:    _SQLReviewService_CreateSQLReviewConfig_Handler,
		},
		{
			MethodName: "ListSQLReviewConfigs",
			Handler:    _SQLReviewService_ListSQLReviewConfigs_Handler,
		},
		{
			MethodName: "GetSQLReviewConfig",
			Handler:    _SQLReviewService_GetSQLReviewConfig_Handler,
		},
		{
			MethodName: "UpdateSQLReviewConfig",
			Handler:    _SQLReviewService_UpdateSQLReviewConfig_Handler,
		},
		{
			MethodName: "DeleteSQLReviewConfig",
			Handler:    _SQLReviewService_DeleteSQLReviewConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/sql_review_config_service.proto",
}
