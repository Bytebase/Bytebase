// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/approval_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApprovalService_GetApproval_FullMethodName             = "/bytebase.v1.ApprovalService/GetApproval"
	ApprovalService_ListApprovals_FullMethodName           = "/bytebase.v1.ApprovalService/ListApprovals"
	ApprovalService_PatchApprovalNodeStatus_FullMethodName = "/bytebase.v1.ApprovalService/PatchApprovalNodeStatus"
)

// ApprovalServiceClient is the client API for ApprovalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovalServiceClient interface {
	GetApproval(ctx context.Context, in *GetApprovalRequest, opts ...grpc.CallOption) (*Approval, error)
	ListApprovals(ctx context.Context, in *ListApprovalsRequest, opts ...grpc.CallOption) (*ListApprovalsResponse, error)
	PatchApprovalNodeStatus(ctx context.Context, in *PatchApprovalNodeStatusRequest, opts ...grpc.CallOption) (*Approval, error)
}

type approvalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovalServiceClient(cc grpc.ClientConnInterface) ApprovalServiceClient {
	return &approvalServiceClient{cc}
}

func (c *approvalServiceClient) GetApproval(ctx context.Context, in *GetApprovalRequest, opts ...grpc.CallOption) (*Approval, error) {
	out := new(Approval)
	err := c.cc.Invoke(ctx, ApprovalService_GetApproval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ListApprovals(ctx context.Context, in *ListApprovalsRequest, opts ...grpc.CallOption) (*ListApprovalsResponse, error) {
	out := new(ListApprovalsResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ListApprovals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) PatchApprovalNodeStatus(ctx context.Context, in *PatchApprovalNodeStatusRequest, opts ...grpc.CallOption) (*Approval, error) {
	out := new(Approval)
	err := c.cc.Invoke(ctx, ApprovalService_PatchApprovalNodeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovalServiceServer is the server API for ApprovalService service.
// All implementations must embed UnimplementedApprovalServiceServer
// for forward compatibility
type ApprovalServiceServer interface {
	GetApproval(context.Context, *GetApprovalRequest) (*Approval, error)
	ListApprovals(context.Context, *ListApprovalsRequest) (*ListApprovalsResponse, error)
	PatchApprovalNodeStatus(context.Context, *PatchApprovalNodeStatusRequest) (*Approval, error)
	mustEmbedUnimplementedApprovalServiceServer()
}

// UnimplementedApprovalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApprovalServiceServer struct {
}

func (UnimplementedApprovalServiceServer) GetApproval(context.Context, *GetApprovalRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApproval not implemented")
}
func (UnimplementedApprovalServiceServer) ListApprovals(context.Context, *ListApprovalsRequest) (*ListApprovalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApprovals not implemented")
}
func (UnimplementedApprovalServiceServer) PatchApprovalNodeStatus(context.Context, *PatchApprovalNodeStatusRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchApprovalNodeStatus not implemented")
}
func (UnimplementedApprovalServiceServer) mustEmbedUnimplementedApprovalServiceServer() {}

// UnsafeApprovalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovalServiceServer will
// result in compilation errors.
type UnsafeApprovalServiceServer interface {
	mustEmbedUnimplementedApprovalServiceServer()
}

func RegisterApprovalServiceServer(s grpc.ServiceRegistrar, srv ApprovalServiceServer) {
	s.RegisterService(&ApprovalService_ServiceDesc, srv)
}

func _ApprovalService_GetApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).GetApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_GetApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).GetApproval(ctx, req.(*GetApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ListApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApprovalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ListApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ListApprovals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ListApprovals(ctx, req.(*ListApprovalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_PatchApprovalNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchApprovalNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).PatchApprovalNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_PatchApprovalNodeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).PatchApprovalNodeStatus(ctx, req.(*PatchApprovalNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApprovalService_ServiceDesc is the grpc.ServiceDesc for ApprovalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApprovalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.ApprovalService",
	HandlerType: (*ApprovalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApproval",
			Handler:    _ApprovalService_GetApproval_Handler,
		},
		{
			MethodName: "ListApprovals",
			Handler:    _ApprovalService_ListApprovals_Handler,
		},
		{
			MethodName: "PatchApprovalNodeStatus",
			Handler:    _ApprovalService_PatchApprovalNodeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/approval_service.proto",
}
