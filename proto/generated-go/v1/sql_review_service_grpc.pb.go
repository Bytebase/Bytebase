// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: v1/sql_review_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SQLReviewService_CreateSQLReview_FullMethodName = "/bytebase.v1.SQLReviewService/CreateSQLReview"
	SQLReviewService_ListSQLReviews_FullMethodName  = "/bytebase.v1.SQLReviewService/ListSQLReviews"
	SQLReviewService_GetSQLReview_FullMethodName    = "/bytebase.v1.SQLReviewService/GetSQLReview"
	SQLReviewService_UpdateSQLReview_FullMethodName = "/bytebase.v1.SQLReviewService/UpdateSQLReview"
	SQLReviewService_DeleteSQLReview_FullMethodName = "/bytebase.v1.SQLReviewService/DeleteSQLReview"
)

// SQLReviewServiceClient is the client API for SQLReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQLReviewServiceClient interface {
	CreateSQLReview(ctx context.Context, in *CreateSQLReviewRequest, opts ...grpc.CallOption) (*SQLReview, error)
	ListSQLReviews(ctx context.Context, in *ListSQLReviewsRequest, opts ...grpc.CallOption) (*ListSQLReviewsResponse, error)
	GetSQLReview(ctx context.Context, in *GetSQLReviewRequest, opts ...grpc.CallOption) (*SQLReview, error)
	UpdateSQLReview(ctx context.Context, in *UpdateSQLReviewRequest, opts ...grpc.CallOption) (*SQLReview, error)
	DeleteSQLReview(ctx context.Context, in *DeleteSQLReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sQLReviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSQLReviewServiceClient(cc grpc.ClientConnInterface) SQLReviewServiceClient {
	return &sQLReviewServiceClient{cc}
}

func (c *sQLReviewServiceClient) CreateSQLReview(ctx context.Context, in *CreateSQLReviewRequest, opts ...grpc.CallOption) (*SQLReview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SQLReview)
	err := c.cc.Invoke(ctx, SQLReviewService_CreateSQLReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLReviewServiceClient) ListSQLReviews(ctx context.Context, in *ListSQLReviewsRequest, opts ...grpc.CallOption) (*ListSQLReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSQLReviewsResponse)
	err := c.cc.Invoke(ctx, SQLReviewService_ListSQLReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLReviewServiceClient) GetSQLReview(ctx context.Context, in *GetSQLReviewRequest, opts ...grpc.CallOption) (*SQLReview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SQLReview)
	err := c.cc.Invoke(ctx, SQLReviewService_GetSQLReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLReviewServiceClient) UpdateSQLReview(ctx context.Context, in *UpdateSQLReviewRequest, opts ...grpc.CallOption) (*SQLReview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SQLReview)
	err := c.cc.Invoke(ctx, SQLReviewService_UpdateSQLReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLReviewServiceClient) DeleteSQLReview(ctx context.Context, in *DeleteSQLReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SQLReviewService_DeleteSQLReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQLReviewServiceServer is the server API for SQLReviewService service.
// All implementations must embed UnimplementedSQLReviewServiceServer
// for forward compatibility
type SQLReviewServiceServer interface {
	CreateSQLReview(context.Context, *CreateSQLReviewRequest) (*SQLReview, error)
	ListSQLReviews(context.Context, *ListSQLReviewsRequest) (*ListSQLReviewsResponse, error)
	GetSQLReview(context.Context, *GetSQLReviewRequest) (*SQLReview, error)
	UpdateSQLReview(context.Context, *UpdateSQLReviewRequest) (*SQLReview, error)
	DeleteSQLReview(context.Context, *DeleteSQLReviewRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSQLReviewServiceServer()
}

// UnimplementedSQLReviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSQLReviewServiceServer struct {
}

func (UnimplementedSQLReviewServiceServer) CreateSQLReview(context.Context, *CreateSQLReviewRequest) (*SQLReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSQLReview not implemented")
}
func (UnimplementedSQLReviewServiceServer) ListSQLReviews(context.Context, *ListSQLReviewsRequest) (*ListSQLReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSQLReviews not implemented")
}
func (UnimplementedSQLReviewServiceServer) GetSQLReview(context.Context, *GetSQLReviewRequest) (*SQLReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSQLReview not implemented")
}
func (UnimplementedSQLReviewServiceServer) UpdateSQLReview(context.Context, *UpdateSQLReviewRequest) (*SQLReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSQLReview not implemented")
}
func (UnimplementedSQLReviewServiceServer) DeleteSQLReview(context.Context, *DeleteSQLReviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSQLReview not implemented")
}
func (UnimplementedSQLReviewServiceServer) mustEmbedUnimplementedSQLReviewServiceServer() {}

// UnsafeSQLReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQLReviewServiceServer will
// result in compilation errors.
type UnsafeSQLReviewServiceServer interface {
	mustEmbedUnimplementedSQLReviewServiceServer()
}

func RegisterSQLReviewServiceServer(s grpc.ServiceRegistrar, srv SQLReviewServiceServer) {
	s.RegisterService(&SQLReviewService_ServiceDesc, srv)
}

func _SQLReviewService_CreateSQLReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSQLReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLReviewServiceServer).CreateSQLReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLReviewService_CreateSQLReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLReviewServiceServer).CreateSQLReview(ctx, req.(*CreateSQLReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLReviewService_ListSQLReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSQLReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLReviewServiceServer).ListSQLReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLReviewService_ListSQLReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLReviewServiceServer).ListSQLReviews(ctx, req.(*ListSQLReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLReviewService_GetSQLReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSQLReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLReviewServiceServer).GetSQLReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLReviewService_GetSQLReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLReviewServiceServer).GetSQLReview(ctx, req.(*GetSQLReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLReviewService_UpdateSQLReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSQLReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLReviewServiceServer).UpdateSQLReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLReviewService_UpdateSQLReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLReviewServiceServer).UpdateSQLReview(ctx, req.(*UpdateSQLReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLReviewService_DeleteSQLReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSQLReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLReviewServiceServer).DeleteSQLReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLReviewService_DeleteSQLReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLReviewServiceServer).DeleteSQLReview(ctx, req.(*DeleteSQLReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SQLReviewService_ServiceDesc is the grpc.ServiceDesc for SQLReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQLReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.SQLReviewService",
	HandlerType: (*SQLReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSQLReview",
			Handler:    _SQLReviewService_CreateSQLReview_Handler,
		},
		{
			MethodName: "ListSQLReviews",
			Handler:    _SQLReviewService_ListSQLReviews_Handler,
		},
		{
			MethodName: "GetSQLReview",
			Handler:    _SQLReviewService_GetSQLReview_Handler,
		},
		{
			MethodName: "UpdateSQLReview",
			Handler:    _SQLReviewService_UpdateSQLReview_Handler,
		},
		{
			MethodName: "DeleteSQLReview",
			Handler:    _SQLReviewService_DeleteSQLReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/sql_review_service.proto",
}
