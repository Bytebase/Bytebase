// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: store/plan.proto

package store

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type is the database change type.
type PlanWorkflow_ChangeDatabaseConfig_Type int32

const (
	PlanWorkflow_ChangeDatabaseConfig_TYPE_UNSPECIFIED PlanWorkflow_ChangeDatabaseConfig_Type = 0
	// Used for establishing schema baseline, this is used when
	// 1. Onboard the database into Bytebase since Bytebase needs to know the current database schema.
	// 2. Had schema drift and need to re-establish the baseline.
	PlanWorkflow_ChangeDatabaseConfig_BASELINE PlanWorkflow_ChangeDatabaseConfig_Type = 1
	// Used for DDL changes including CREATE DATABASE.
	PlanWorkflow_ChangeDatabaseConfig_MIGRATE PlanWorkflow_ChangeDatabaseConfig_Type = 2
	// Used for schema changes via state-based schema migration including CREATE DATABASE.
	PlanWorkflow_ChangeDatabaseConfig_MIGRATE_SDL PlanWorkflow_ChangeDatabaseConfig_Type = 3
	// Used for DDL changes using gh-ost.
	PlanWorkflow_ChangeDatabaseConfig_MIGRATE_GHOST PlanWorkflow_ChangeDatabaseConfig_Type = 4
	// Used when restoring from a backup (the restored database branched from the original backup).
	PlanWorkflow_ChangeDatabaseConfig_BRANCH PlanWorkflow_ChangeDatabaseConfig_Type = 5
	// Used for DML change.
	PlanWorkflow_ChangeDatabaseConfig_DATA PlanWorkflow_ChangeDatabaseConfig_Type = 6
)

// Enum value maps for PlanWorkflow_ChangeDatabaseConfig_Type.
var (
	PlanWorkflow_ChangeDatabaseConfig_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "BASELINE",
		2: "MIGRATE",
		3: "MIGRATE_SDL",
		4: "MIGRATE_GHOST",
		5: "BRANCH",
		6: "DATA",
	}
	PlanWorkflow_ChangeDatabaseConfig_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"BASELINE":         1,
		"MIGRATE":          2,
		"MIGRATE_SDL":      3,
		"MIGRATE_GHOST":    4,
		"BRANCH":           5,
		"DATA":             6,
	}
)

func (x PlanWorkflow_ChangeDatabaseConfig_Type) Enum() *PlanWorkflow_ChangeDatabaseConfig_Type {
	p := new(PlanWorkflow_ChangeDatabaseConfig_Type)
	*p = x
	return p
}

func (x PlanWorkflow_ChangeDatabaseConfig_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanWorkflow_ChangeDatabaseConfig_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_store_plan_proto_enumTypes[0].Descriptor()
}

func (PlanWorkflow_ChangeDatabaseConfig_Type) Type() protoreflect.EnumType {
	return &file_store_plan_proto_enumTypes[0]
}

func (x PlanWorkflow_ChangeDatabaseConfig_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanWorkflow_ChangeDatabaseConfig_Type.Descriptor instead.
func (PlanWorkflow_ChangeDatabaseConfig_Type) EnumDescriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 3, 0}
}

type PlanWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steps []*PlanWorkflow_Step `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *PlanWorkflow) Reset() {
	*x = PlanWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanWorkflow) ProtoMessage() {}

func (x *PlanWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanWorkflow.ProtoReflect.Descriptor instead.
func (*PlanWorkflow) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0}
}

func (x *PlanWorkflow) GetSteps() []*PlanWorkflow_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

type PlanWorkflow_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Specs []*PlanWorkflow_Spec `protobuf:"bytes,1,rep,name=specs,proto3" json:"specs,omitempty"`
}

func (x *PlanWorkflow_Step) Reset() {
	*x = PlanWorkflow_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanWorkflow_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanWorkflow_Step) ProtoMessage() {}

func (x *PlanWorkflow_Step) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanWorkflow_Step.ProtoReflect.Descriptor instead.
func (*PlanWorkflow_Step) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PlanWorkflow_Step) GetSpecs() []*PlanWorkflow_Spec {
	if x != nil {
		return x.Specs
	}
	return nil
}

type PlanWorkflow_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// earliest_allowed_time the earliest execution time of the change.
	EarliestAllowedTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=earliest_allowed_time,json=earliestAllowedTime,proto3" json:"earliest_allowed_time,omitempty"`
	// Types that are assignable to Config:
	//
	//	*PlanWorkflow_Spec_CreateDatabaseConfig
	//	*PlanWorkflow_Spec_ChangeDatabaseConfig
	//	*PlanWorkflow_Spec_RestoreDatabaseConfig
	Config isPlanWorkflow_Spec_Config `protobuf_oneof:"config"`
}

func (x *PlanWorkflow_Spec) Reset() {
	*x = PlanWorkflow_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanWorkflow_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanWorkflow_Spec) ProtoMessage() {}

func (x *PlanWorkflow_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanWorkflow_Spec.ProtoReflect.Descriptor instead.
func (*PlanWorkflow_Spec) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PlanWorkflow_Spec) GetEarliestAllowedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestAllowedTime
	}
	return nil
}

func (m *PlanWorkflow_Spec) GetConfig() isPlanWorkflow_Spec_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *PlanWorkflow_Spec) GetCreateDatabaseConfig() *PlanWorkflow_CreateDatabaseConfig {
	if x, ok := x.GetConfig().(*PlanWorkflow_Spec_CreateDatabaseConfig); ok {
		return x.CreateDatabaseConfig
	}
	return nil
}

func (x *PlanWorkflow_Spec) GetChangeDatabaseConfig() *PlanWorkflow_ChangeDatabaseConfig {
	if x, ok := x.GetConfig().(*PlanWorkflow_Spec_ChangeDatabaseConfig); ok {
		return x.ChangeDatabaseConfig
	}
	return nil
}

func (x *PlanWorkflow_Spec) GetRestoreDatabaseConfig() *PlanWorkflow_RestoreDatabaseConfig {
	if x, ok := x.GetConfig().(*PlanWorkflow_Spec_RestoreDatabaseConfig); ok {
		return x.RestoreDatabaseConfig
	}
	return nil
}

type isPlanWorkflow_Spec_Config interface {
	isPlanWorkflow_Spec_Config()
}

type PlanWorkflow_Spec_CreateDatabaseConfig struct {
	CreateDatabaseConfig *PlanWorkflow_CreateDatabaseConfig `protobuf:"bytes,1,opt,name=create_database_config,json=createDatabaseConfig,proto3,oneof"`
}

type PlanWorkflow_Spec_ChangeDatabaseConfig struct {
	ChangeDatabaseConfig *PlanWorkflow_ChangeDatabaseConfig `protobuf:"bytes,2,opt,name=change_database_config,json=changeDatabaseConfig,proto3,oneof"`
}

type PlanWorkflow_Spec_RestoreDatabaseConfig struct {
	RestoreDatabaseConfig *PlanWorkflow_RestoreDatabaseConfig `protobuf:"bytes,3,opt,name=restore_database_config,json=restoreDatabaseConfig,proto3,oneof"`
}

func (*PlanWorkflow_Spec_CreateDatabaseConfig) isPlanWorkflow_Spec_Config() {}

func (*PlanWorkflow_Spec_ChangeDatabaseConfig) isPlanWorkflow_Spec_Config() {}

func (*PlanWorkflow_Spec_RestoreDatabaseConfig) isPlanWorkflow_Spec_Config() {}

type PlanWorkflow_CreateDatabaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the instance on which the database is created.
	// Format: instances/{instance}
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The name of the database to create.
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// table is the name of the table, if it is not empty, Bytebase should create a table after creating the database.
	// For example, in MongoDB, it only creates the database when we first store data in that database.
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// character_set is the character set of the database.
	CharacterSet string `protobuf:"bytes,4,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// collation is the collation of the database.
	Collation string `protobuf:"bytes,5,opt,name=collation,proto3" json:"collation,omitempty"`
	// cluster is the cluster of the database. This is only applicable to ClickHouse for "ON CLUSTER <<cluster>>".
	Cluster string `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// owner is the owner of the database. This is only applicable to Postgres for "WITH OWNER <<owner>>".
	Owner string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	// backup is the resource name of the backup.
	// FIXME: backup v1 API is not ready yet, write the format here when it's ready.
	Backup string `protobuf:"bytes,8,opt,name=backup,proto3" json:"backup,omitempty"`
	// labels of the database.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlanWorkflow_CreateDatabaseConfig) Reset() {
	*x = PlanWorkflow_CreateDatabaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanWorkflow_CreateDatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanWorkflow_CreateDatabaseConfig) ProtoMessage() {}

func (x *PlanWorkflow_CreateDatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanWorkflow_CreateDatabaseConfig.ProtoReflect.Descriptor instead.
func (*PlanWorkflow_CreateDatabaseConfig) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PlanWorkflow_CreateDatabaseConfig) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PlanWorkflow_CreateDatabaseConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PlanWorkflow_CreateDatabaseConfig) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *PlanWorkflow_CreateDatabaseConfig) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *PlanWorkflow_CreateDatabaseConfig) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *PlanWorkflow_CreateDatabaseConfig) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *PlanWorkflow_CreateDatabaseConfig) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *PlanWorkflow_CreateDatabaseConfig) GetBackup() string {
	if x != nil {
		return x.Backup
	}
	return ""
}

func (x *PlanWorkflow_CreateDatabaseConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type PlanWorkflow_ChangeDatabaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the target.
	// Format: projects/{project}/logicalDatabases/{ldb1}.
	// Format: projects/{project}/logicalDatabases/{ldb1}/logicalTables/{ltb1}.
	// Format: instances/{xxx}/databases/{db1}.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The resource name of the sheet.
	// Format: sheets/{sheet}
	Sheet string                                 `protobuf:"bytes,2,opt,name=sheet,proto3" json:"sheet,omitempty"`
	Type  PlanWorkflow_ChangeDatabaseConfig_Type `protobuf:"varint,3,opt,name=type,proto3,enum=bytebase.store.PlanWorkflow_ChangeDatabaseConfig_Type" json:"type,omitempty"`
	// schema_version is parsed from VCS file name.
	// It is automatically generated in the UI workflow.
	SchemaVersion string `protobuf:"bytes,4,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	// If RollbackEnabled, build the RollbackSheetID of the task.
	RollbackEnabled bool `protobuf:"varint,5,opt,name=rollback_enabled,json=rollbackEnabled,proto3" json:"rollback_enabled,omitempty"`
}

func (x *PlanWorkflow_ChangeDatabaseConfig) Reset() {
	*x = PlanWorkflow_ChangeDatabaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanWorkflow_ChangeDatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanWorkflow_ChangeDatabaseConfig) ProtoMessage() {}

func (x *PlanWorkflow_ChangeDatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanWorkflow_ChangeDatabaseConfig.ProtoReflect.Descriptor instead.
func (*PlanWorkflow_ChangeDatabaseConfig) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PlanWorkflow_ChangeDatabaseConfig) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PlanWorkflow_ChangeDatabaseConfig) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *PlanWorkflow_ChangeDatabaseConfig) GetType() PlanWorkflow_ChangeDatabaseConfig_Type {
	if x != nil {
		return x.Type
	}
	return PlanWorkflow_ChangeDatabaseConfig_TYPE_UNSPECIFIED
}

func (x *PlanWorkflow_ChangeDatabaseConfig) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *PlanWorkflow_ChangeDatabaseConfig) GetRollbackEnabled() bool {
	if x != nil {
		return x.RollbackEnabled
	}
	return false
}

type PlanWorkflow_RestoreDatabaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the target to restore.
	// Format: instances/{instance}/databases/{database}
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// create_database_config is present if the user wants to restore to a new database.
	CreateDatabaseConfig *PlanWorkflow_CreateDatabaseConfig `protobuf:"bytes,2,opt,name=create_database_config,json=createDatabaseConfig,proto3,oneof" json:"create_database_config,omitempty"`
	// source determines how to restore the database.
	// 1. from a backup
	// 2. from a point in time
	//
	// Types that are assignable to Source:
	//
	//	*PlanWorkflow_RestoreDatabaseConfig_Backup
	//	*PlanWorkflow_RestoreDatabaseConfig_PointInTime
	Source isPlanWorkflow_RestoreDatabaseConfig_Source `protobuf_oneof:"source"`
}

func (x *PlanWorkflow_RestoreDatabaseConfig) Reset() {
	*x = PlanWorkflow_RestoreDatabaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_store_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanWorkflow_RestoreDatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanWorkflow_RestoreDatabaseConfig) ProtoMessage() {}

func (x *PlanWorkflow_RestoreDatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanWorkflow_RestoreDatabaseConfig.ProtoReflect.Descriptor instead.
func (*PlanWorkflow_RestoreDatabaseConfig) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PlanWorkflow_RestoreDatabaseConfig) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PlanWorkflow_RestoreDatabaseConfig) GetCreateDatabaseConfig() *PlanWorkflow_CreateDatabaseConfig {
	if x != nil {
		return x.CreateDatabaseConfig
	}
	return nil
}

func (m *PlanWorkflow_RestoreDatabaseConfig) GetSource() isPlanWorkflow_RestoreDatabaseConfig_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *PlanWorkflow_RestoreDatabaseConfig) GetBackup() string {
	if x, ok := x.GetSource().(*PlanWorkflow_RestoreDatabaseConfig_Backup); ok {
		return x.Backup
	}
	return ""
}

func (x *PlanWorkflow_RestoreDatabaseConfig) GetPointInTime() *timestamppb.Timestamp {
	if x, ok := x.GetSource().(*PlanWorkflow_RestoreDatabaseConfig_PointInTime); ok {
		return x.PointInTime
	}
	return nil
}

type isPlanWorkflow_RestoreDatabaseConfig_Source interface {
	isPlanWorkflow_RestoreDatabaseConfig_Source()
}

type PlanWorkflow_RestoreDatabaseConfig_Backup struct {
	// FIXME: format TBD
	// Restore from a backup.
	Backup string `protobuf:"bytes,3,opt,name=backup,proto3,oneof"`
}

type PlanWorkflow_RestoreDatabaseConfig_PointInTime struct {
	// After the PITR operations, the database will be recovered to the state at this time.
	PointInTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=point_in_time,json=pointInTime,proto3,oneof"`
}

func (*PlanWorkflow_RestoreDatabaseConfig_Backup) isPlanWorkflow_RestoreDatabaseConfig_Source() {}

func (*PlanWorkflow_RestoreDatabaseConfig_PointInTime) isPlanWorkflow_RestoreDatabaseConfig_Source() {
}

var File_store_plan_proto protoreflect.FileDescriptor

var file_store_plan_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x0c, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x1a, 0x3f, 0x0a,
	0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x1a, 0xa4,
	0x03, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x61, 0x72, 0x6c, 0x69,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x13, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x69, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a,
	0x17, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xfd, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x12, 0x55, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd5, 0x02, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x71, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x53, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x44, 0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x47, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x41, 0x4e, 0x43,
	0x48, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x06, 0x1a, 0x9e, 0x02,
	0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x6c, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x01, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x14,
	0x5a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_store_plan_proto_rawDescOnce sync.Once
	file_store_plan_proto_rawDescData = file_store_plan_proto_rawDesc
)

func file_store_plan_proto_rawDescGZIP() []byte {
	file_store_plan_proto_rawDescOnce.Do(func() {
		file_store_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_store_plan_proto_rawDescData)
	})
	return file_store_plan_proto_rawDescData
}

var file_store_plan_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_store_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_store_plan_proto_goTypes = []interface{}{
	(PlanWorkflow_ChangeDatabaseConfig_Type)(0), // 0: bytebase.store.PlanWorkflow.ChangeDatabaseConfig.Type
	(*PlanWorkflow)(nil),                        // 1: bytebase.store.PlanWorkflow
	(*PlanWorkflow_Step)(nil),                   // 2: bytebase.store.PlanWorkflow.Step
	(*PlanWorkflow_Spec)(nil),                   // 3: bytebase.store.PlanWorkflow.Spec
	(*PlanWorkflow_CreateDatabaseConfig)(nil),   // 4: bytebase.store.PlanWorkflow.CreateDatabaseConfig
	(*PlanWorkflow_ChangeDatabaseConfig)(nil),   // 5: bytebase.store.PlanWorkflow.ChangeDatabaseConfig
	(*PlanWorkflow_RestoreDatabaseConfig)(nil),  // 6: bytebase.store.PlanWorkflow.RestoreDatabaseConfig
	nil,                           // 7: bytebase.store.PlanWorkflow.CreateDatabaseConfig.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_store_plan_proto_depIdxs = []int32{
	2,  // 0: bytebase.store.PlanWorkflow.steps:type_name -> bytebase.store.PlanWorkflow.Step
	3,  // 1: bytebase.store.PlanWorkflow.Step.specs:type_name -> bytebase.store.PlanWorkflow.Spec
	8,  // 2: bytebase.store.PlanWorkflow.Spec.earliest_allowed_time:type_name -> google.protobuf.Timestamp
	4,  // 3: bytebase.store.PlanWorkflow.Spec.create_database_config:type_name -> bytebase.store.PlanWorkflow.CreateDatabaseConfig
	5,  // 4: bytebase.store.PlanWorkflow.Spec.change_database_config:type_name -> bytebase.store.PlanWorkflow.ChangeDatabaseConfig
	6,  // 5: bytebase.store.PlanWorkflow.Spec.restore_database_config:type_name -> bytebase.store.PlanWorkflow.RestoreDatabaseConfig
	7,  // 6: bytebase.store.PlanWorkflow.CreateDatabaseConfig.labels:type_name -> bytebase.store.PlanWorkflow.CreateDatabaseConfig.LabelsEntry
	0,  // 7: bytebase.store.PlanWorkflow.ChangeDatabaseConfig.type:type_name -> bytebase.store.PlanWorkflow.ChangeDatabaseConfig.Type
	4,  // 8: bytebase.store.PlanWorkflow.RestoreDatabaseConfig.create_database_config:type_name -> bytebase.store.PlanWorkflow.CreateDatabaseConfig
	8,  // 9: bytebase.store.PlanWorkflow.RestoreDatabaseConfig.point_in_time:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_store_plan_proto_init() }
func file_store_plan_proto_init() {
	if File_store_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_store_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanWorkflow_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanWorkflow_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanWorkflow_CreateDatabaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanWorkflow_ChangeDatabaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_store_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanWorkflow_RestoreDatabaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_store_plan_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PlanWorkflow_Spec_CreateDatabaseConfig)(nil),
		(*PlanWorkflow_Spec_ChangeDatabaseConfig)(nil),
		(*PlanWorkflow_Spec_RestoreDatabaseConfig)(nil),
	}
	file_store_plan_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*PlanWorkflow_RestoreDatabaseConfig_Backup)(nil),
		(*PlanWorkflow_RestoreDatabaseConfig_PointInTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_store_plan_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_store_plan_proto_goTypes,
		DependencyIndexes: file_store_plan_proto_depIdxs,
		EnumInfos:         file_store_plan_proto_enumTypes,
		MessageInfos:      file_store_plan_proto_msgTypes,
	}.Build()
	File_store_plan_proto = out.File
	file_store_plan_proto_rawDesc = nil
	file_store_plan_proto_goTypes = nil
	file_store_plan_proto_depIdxs = nil
}
