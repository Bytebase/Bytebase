syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "v1/approval_template_service.proto";

option go_package = "generated-go/v1";

service ApprovalService {
  rpc ListApprovals(ListApprovalsRequest) returns (ListApprovalsResponse) {
    option (google.api.http) = {get: "/v1/{parent=stages/*/tasks/*}/approvals"};
    option (google.api.method_signature) = "parent";
  }

  rpc PatchApprovalNodeStatus(PatchApprovalNodeStatusRequest) returns (Approval) {
    option (google.api.http) = {
      patch: "/v1/{parent=stages/*/tasks/*/approvals/*}/nodes:patchApprovalNodeStatus"
      body: "*"
    };
  }
}

message ListApprovalsRequest {
  // The parent, which owns this collection of instances.
  // Format: stages/{stage}/tasks/{task}
  // Use "stages/-/tasks/-" to list all instances from all stages.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // The maximum number of instances to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 instances will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListInstances` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListInstances` must match
  // the call that provided the page token.
  string page_token = 3;

  // Show deleted instances if specified.
  bool show_deleted = 4;
}

message ListApprovalsResponse {
  repeated Approval approvals = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message PatchApprovalNodeStatusRequest {
  // Format: stages/{stage}/tasks/{task}/approvals/{approval}
  string parent = 1;

  // The `uid` of the approval node.
  string node = 2;

  // The new status of the approval node.
  ApprovalNode.Status status = 3;
}

message Approval {
  // Format: stages/{stage}/tasks/{task}/approvals/{approval}
  string name = 1;
  // system-generated unique identifier
  string uid = 2;
  ApprovalFlow flow = 3;
}
