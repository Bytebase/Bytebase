syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "v1/common.proto";

option go_package = "generated-go/v1";

service SQLService {
  rpc Pretty(PrettyRequest) returns (PrettyResponse) {
    option (google.api.http) = {
      post: "/v1/sql/pretty"
      body: "*"
    };
  }
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      post: "/v1/{instance=instances/*}/sql:query"
      body: "*"
    };
    option (google.api.method_signature) = "instance";
  }
}

message QueryRequest {
  // The instance to execute the query against.
  // Format: instances/{instance}
  string instance = 1 [(google.api.field_behavior) = REQUIRED];

  // The connection database name to execute the query against.
  // For PostgreSQL, it's required.
  // For other database engines, it's optional. Use empty string to execute against without specifying a database.
  string connection_database = 2;

  // The SQL statement to execute.
  string statement = 3;

  // The maximum number of rows to return.
  int32 limit = 4;
}

message QueryResponse {
  // The query result.
  repeated QueryResult result = 1;

  // The query advice.
  repeated Advice advice = 2;
}

message QueryResult {
  // The column names of the query result.
  repeated string column_names = 1;

  // The column types of the query result.
  repeated string column_type_names = 2;

  // The data of the query result.
  repeated string data = 3;

  // The column is masked or not.
  repeated bool masked = 4;

  // The error message if the query failed.
  string error = 5;
}

message Advice {
  // The advice status.
  // Should be one of the following:
  // - SUCCESS
  // - WARN
  // - ERROR
  string status = 1;

  // The advice code.
  int32 code = 2;

  // The advice title.
  string title = 3;

  // The advice content.
  string content = 4;

  // The advice line number in the SQL statement.
  int32 line = 5;

  // The advice details.
  string details = 6;
}

message PrettyRequest {
  Engine engine = 1;

  // The SDL format SQL schema information that was dumped from a database engine.
  // This information will be sorted to match the order of statements in the userSchema.
  string current_schema = 2;

  // The expected SDL schema. This schema will be checked for correctness and normalized.
  string expected_schema = 3;
}

message PrettyResponse {
  // The pretty-formatted version of current schema.
  string current_schema = 1;

  // The expected SDL schema after normalizing.
  string expected_schema = 2;
}
