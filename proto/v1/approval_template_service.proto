syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package = "generated-go/v1";

service ApprovalTemplateService {
  rpc ListApprovalTemplates(ListApprovalTemplatesRequest) returns (ListApprovalTemplatesResponse) {
    option (google.api.http) = {get: "/v1/approvalTemplates"};
    option (google.api.method_signature) = "";
  }
  rpc SetApprovalTemplates(SetApprovalTemplatesRequest) returns (SetApprovalTemplatesResponse) {
    option (google.api.http) = {
      post: "/v1/approvalTemplates:set"
      body: "*"
    };
  }
}

message ListApprovalTemplatesRequest {
  // The maximum number of approval templates to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 projects will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListApprovalTemplates` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListApprovalTemplates` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListApprovalTemplatesResponse {
  // The approval templates from the specified request.
  repeated ApprovalTemplate approval_templates = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message SetApprovalTemplatesRequest {
  // The approval templates to set.
  repeated ApprovalTemplate approval_templates = 1;
}

message SetApprovalTemplatesResponse {
  repeated ApprovalTemplate approval_templates = 1;
}

message ApprovalTemplate {
  // Format: approvalTemplates/{approvalTemplate}
  string name = 1;
  // system-generated unique identifier
  string uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  ApprovalFlow flow = 3;
  // Format: `user:{email_id}`
  // example: `user:hello@world.com`
  string creator = 4;
}

message ApprovalFlow {
  repeated ApprovalStep steps = 1;
}

message ApprovalStep {
  // Type of the ApprovalStep
  // AND means every node must be approved to proceed.
  // OR means approving any node will proceed.
  enum Type {
    TYPE_UNSPECIFIED = 0;
    AND = 1;
    OR = 2;
  }
  Type type = 1;

  repeated ApprovalNode nodes = 2;
}

message ApprovalNode {
  // uid uniquely identifies a node in a flow.
  string uid = 1;

  // Type of the ApprovalNode.
  // type determines who should approve this node.
  // ROLE means the ApprovalNode can be approved by an user from our predefined user group.
  // See RoleValue below for the predefined user groups.
  enum Type {
    TYPE_UNSPECIFIED = 0;
    ROLE = 1;
  }
  Type type = 2;

  // RoleValue is used if ApprovalNode Type is ROLE
  // The predefined user groups are:
  // - WORKSPACE_OWNER
  // - DBA
  // - PROJECT_OWNER
  // - PROJECT_MEMBER
  enum RoleValue {
    ROLE_VALUE_UNSPECIFILED = 0;
    WORKSPACE_OWNER = 1;
    DBA = 2;
    PROJECT_OWNER = 3;
    PROJECT_MEMBER = 4;
  }
  oneof payload {
    RoleValue role_value = 3;
  }
}
