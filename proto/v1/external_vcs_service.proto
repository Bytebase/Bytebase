syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

import "v1/common.proto";

option go_package = "generated-go/v1";

service ExternalVCSService {
  rpc CreateExternalVCS(CreateExternalVCSRequest) returns (ExternalVCS) {
    option (google.api.http) = {
      post: "/v1/external_vcs"
      body: "external_vcs"
    };
    option (google.api.method_signature) = "";
  }

  rpc GetExternalVCS(GetExternalVCSRequest) returns (ExternalVCS) {
    option (google.api.http) = {
      get: "/v1/{name=external_vcs/*}"
    };
    option (google.api.method_signature) = "name";
  }

  rpc ListExternalVCS(ListExternalVCSRequest) returns (ListExternalVCSResponse) {
    option (google.api.http) = {
      get: "/v1/external_vcs"
    };
    option (google.api.method_signature) = "";
  }

  rpc UpdateExternalVCS(UpdateExternalVCSRequest) returns (ExternalVCS) {
    option (google.api.http) = {
      patch: "/v1/{external_vcs.name=external_vcs/*}"
      body: "external_vcs"
    };
    option (google.api.method_signature) = "external_vcs,update_mask";
  }

  rpc DeleteExternalVCS(DeleteExternalVCSRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=external_vcs/*}"
    };
    option (google.api.method_signature) = "name";
  }

  rpc ListExternalRepositories(ListExternalRepositoriesRequest) returns (ListExternalRepositoriesResponse) {
    option (google.api.http) = {
      get: "/v1/{name=external_vcs/*}/external_repositories"
    };
    option (google.api.method_signature) = "name";
  }
}

message CreateExternalVCSRequest {
  ExternalVCS external_vcs = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetExternalVCSRequest {
    // The name of the external VCS to retrieve.
    // Format: external_vcs/{external_vcs}
    string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListExternalVCSRequest {
  // Not used. The maximum number of external VCS to return. The service may return fewer than this value.
  // If unspecified, at most 100 external VCS will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;
    
  // Not used. A page token, received from a previous `ListExternalVCS` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 2;
}

message ListExternalVCSResponse {
  // The list of external VCS.
  repeated ExternalVCS external_vcs = 1;
    
  // Not used. A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message UpdateExternalVCSRequest {
  ExternalVCS external_vcs = 1 [(google.api.field_behavior) = REQUIRED];
    
  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteExternalVCSRequest {
  // The name of the external VCS to delete.
  // Format: external_vcs/{external_vcs}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListExternalRepositoriesRequest {
  // The name of the external VCS to retrieve.
  // Format: external_vcs/{external_vcs}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListExternalRepositoriesResponse {
  message ExternalRepository {
    // The id of the external repository.
    string id = 1;
    // The name of the external repository.
    string name = 2;
    // The fullpath of the external repository.
    string fullpath = 3;
    // Web url of the external repository.
    string web_url = 4;
  }
  // The list of external repositories.
  repeated ExternalRepository external_repositories = 1;
}



message ExternalVCS {
  // The name of the external VCS, generated by the server, and also is the unique identifier.
  // Format: external_vcs/{external_vcs}
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The title of the external VCS. It is used to display in the UI. Specified by the client.
  string title = 2 [(google.api.field_behavior) = REQUIRED];

  enum Type {
    TYPE_UNSPECIFIED = 0;
    // GitHub type. Using for GitHub community edition(ce).
    TYPE_GITHUB = 1;
    // GitLab type. Using for GitLab community edition(ce) and enterprise edition(ee).
    TYPE_GITLAB = 2;
  }

  Type type = 3 [(google.api.field_behavior) = REQUIRED];

  // The url of the external VCS. Specified by the client.
  // For example: github.com, gitlab.com, gitlab.bytebase.com.
  string url = 4 [(google.api.field_behavior) = REQUIRED];

  // The API url of the external VCS. Derived from the url.
  string api_url = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The application ID of the external VCS. Specified by the client.
  string application_id = 6 [(google.api.field_behavior) = REQUIRED];

  // The application secret of the external VCS. Specified by the client.
  string secret = 7 [(google.api.field_behavior) = INPUT_ONLY];

  message Repository {
    // The name of the repository, generated by the server, and also is the unique identifier.
    // Format: projects/{project}/repositories/{repository}
    string name = 1 [(google.api.field_behavior) = REQUIRED];
  
    // The title of the repository. For axample: sample.
    string title = 2;
  
    // The full_path of the repository. For example: bytebase/sample.
    string full_path = 3;
  
    // The web url of the repository. For axample: https://gitlab.bytebase.com/bytebase/sample.
    string web_url = 4;
  
    // The branch Bytebase listens to for changes. For example: main.
    string branch_filter = 5;
  
    // The root directory where Bytebase observes the file change. If empty, then it observes the entire repository.
    string base_directory = 6;
  
    // Bytebase only observes the file path name matching the template pattern **relative** to the base directory.
    // Required Placeholder: {{DB_NAME}}, {{VERSION}}, {{TYPE]}.
    // Optional Placeholder: {{ENV_NAME}}, {{DESCRIPTION}}.
    // Optional Directory Wildcard: '*', '**'.
    string file_path_template = 7 [(google.api.field_behavior) = REQUIRED];
  
    // The file path template for storing the latest schema auto-generated by Bytebase after migration.
    // If empty, then Bytebase won't auto generate it.
    // If specified, required placeholder: {{DB_NAME}}, optional placeholder: {{ENV_NAME}}.
    string schema_path_template = 8;
  
    // The file path template for matching the sql files for sheet.
    // If specified, required Placeholder: {{NAME}}, optional Placeholder: {{ENV_NAME}}, {{DB_NAME}}.
    string sheet_path_template = 9;
  
    // Set to true to enable SQL review CI for all PR/MRs.
    bool enable_sql_review_ci = 10;
  
    // The webhook endpoint ID of the repository.
    string webhook_endpoint_id = 11;
  }
  
  // The repositories bind to the external VCS.
  repeated Repository repositories = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}